{
	"info": {
		"_postman_id": "bc9713a4-d239-4699-a016-f84d721c12e1",
		"name": "Team03-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"//console.log(pm.variables.get(\"baseUrl\"));\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"\r",
									"pm.globals.set(\"bearerToken\",responseBody.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2af2df29-bd34-425d-895b-c66ecb3b4b8e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "51022c25-2583-4424-a087-51c627591440",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"sdet@gmail.com\",\r\n  \"password\": \"LmsHackathon@2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "User Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23c864c6-393b-4664-8cf8-385dc8093ba1",
								"exec": [
									"//console.log(pm.variables.get(\"baseUrl\"));",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseBody=pm.response.json();",
									"",
									"pm.globals.set(\"bearerToken\",responseBody.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cff55127-8daf-4826-a1e9-a4c420cd56a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmailId\": \"sdet@gmail.com\",\n  \"password\": \"LmsHackathon@2024\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "User Login (Unauthorized)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed4bcbea-d5b0-403d-a0b2-c5d04dd2d222",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "40a45021-ef2f-4de0-b67d-9c490d0b9d51",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8b78e116-9005-4c92-a0f0-3aa350d9cc27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmailId\": \"sde@gmail.com\",\n  \"password\": \"LmsHackathon@2024\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "User Login (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8846eba7-7a2b-49b7-bd6c-0962dd7035e5",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "878b4d2f-8608-4d6a-9ccf-8f4589b18266",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmailId\": \"\",\n  \"password\": \"LmsHackathon@2024\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login/"
					},
					"response": []
				},
				{
					"name": "User Login (Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78e8db9-61df-45fe-9f0c-23f5be0aa8c0",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d8a38b86-7cf8-449e-8bce-81c4afcd2b0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//   \"userLoginEmailId\": \"sde@gmail.com\",\n//   \"password\": \"LmsHackathon@2024\"\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "User Login ()",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78e8db9-61df-45fe-9f0c-23f5be0aa8c0",
								"exec": [
									"pm.test(\"Status code is 501\", function () {",
									"    pm.response.to.have.status(501);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "384490b9-a813-4314-a359-4a6d5f35914b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//   \"userLoginEmailId\": \"sde@gmail.com\",\n//   \"password\": \"LmsHackathon@2024\"\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login "
					},
					"response": []
				}
			],
			"id": "7e4608fb-b709-43eb-b667-95a6467e2e0d",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f3c1e4da-45fd-4be9-a8aa-0b755f29880e",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "30319e76-6270-4b56-96cd-c80cb12f6ac1",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [],
			"id": "15a4228e-04cb-4226-a142-c3c1f52014f0"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a511dc96-25d3-43e8-b6b1-7e28e90ac04e",
								"exec": [
									"// Define team name and retrieve the current serial number\r",
									"const teamName = \"APINinjas\";\r",
									"let serialNumber = parseInt(pm.environment.get(\"batchSerial\")) || 1;\r",
									"\r",
									"// Format the serial number with leading zeros (e.g., \"001\")\r",
									"let formattedSerial = String(serialNumber).padStart(3, '0');\r",
									"\r",
									"// Generate the BatchName based on team name and serial number\r",
									"const batchName = `${teamName}${formattedSerial}`;\r",
									"\r",
									"// Set the batch name in the environment for use in the request body\r",
									"pm.environment.set(\"batchName\", batchName);\r",
									"\r",
									"// Increment the serial number for the next request and update the environment variable\r",
									"pm.environment.set(\"batchSerial\", serialNumber + 1);\r",
									"\r",
									"// Define a storage of batch descriptions\r",
									"const batchDescriptions = [\r",
									"    \"Introductory course for beginners\",\r",
									"    \"Intermediate level for advanced concepts\",\r",
									"    \"Expert level for specialization\"\r",
									"];\r",
									"\r",
									"// Define a storage of batch numbers of classes\r",
									"const batchClasses = [10, 15, 20];\r",
									"\r",
									"// Pick descriptions and classes based on serial number for variety\r",
									"const batchDescription = batchDescriptions[(serialNumber - 1) % batchDescriptions.length];\r",
									"const batchNoOfClasses = batchClasses[(serialNumber - 1) % batchClasses.length];\r",
									"\r",
									"// Set these values in the environment for use in the request body\r",
									"pm.environment.set(\"batchDescription\", batchDescription);\r",
									"pm.environment.set(\"batchNoOfClasses\", batchNoOfClasses);\r",
									"\r",
									"// Log the generated values for debugging\r",
									"console.log(\"Generated Batch Name:\", batchName);\r",
									"console.log(\"Batch Description:\", batchDescription);\r",
									"console.log(\"Batch No Of Classes:\", batchNoOfClasses);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa427889-3590-452f-ac1c-24397d03f3bf",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var responseBody=pm.response.json();\r",
									"var batchId=responseBody.batchId;\r",
									"pm.globals.set(\"batchId\",batchId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ee5c3612-cf48-4e0a-8472-2d308affe305",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": {{programId}},\r\n\"programName\": \"string\"\r\n\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch Copy",
					"id": "bad6b532-bad4-413c-9c4c-873dcbd62e52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "e84c71cb-35cb-4823-9a8b-0b629d6288db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/batches/9178"
					},
					"response": []
				}
			],
			"id": "8c0fb30a-fd51-4a34-83bd-f4ac6da1c23d"
		},
		{
			"name": "Class",
			"item": [],
			"id": "92ba670a-f05d-4414-bea7-ff5fd0fb98f0"
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "New Request",
					"id": "a09a7df0-162c-4ebf-a673-cc7252b4451a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "fa966a7f-d95a-4fd5-a0db-81870c8cc121"
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es) of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e91fe3ba-8281-4935-9036-e014a358cd6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.include.all.keys('userId', 'roleId', 'programId', 'batchId', 'userRoleProgramBatchStatus');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"UserId and roleId should be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.userId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"UserId should not be empty\");\r",
									"    pm.expect(item.roleId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"RoleId should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ProgramId and batchId are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.programId).to.be.a('number').and.to.be.at.least(0, \"ProgramId should be a non-negative integer\");\r",
									"        pm.expect(item.batchId).to.be.a('number').and.to.be.at.least(0, \"BatchId should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "68e3d0df-7651-4950-80c5-e23a387701dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch(es) of All Users (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f85c8f46-7186-4cdd-9b16-4ebfbe3ed1ee",
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is text/plain\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"",
									"pm.test(\"Response body contains the message 'Invalid endpoint'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid endpoint\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "58a9e715-c442-4367-b007-ab2c0fd17210",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMapp"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch(es) of All Users (Empty EndPoint)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82f5b589-e86e-41cc-b9e2-4b0314aef571",
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is text/plain\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
									"});",
									"",
									"",
									"pm.test(\"Response body contains the message 'Invalid endpoint'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid endpoint\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "abbbb7e3-eb94-4a71-a07c-5d6b1ec1157b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch of a User By User Id",
					"id": "fea0cae6-f006-4359-a846-9e5123d52bb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "099c9ffb-7f3d-4850-a1d8-bef2bcb20236",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a3c05586-67af-44fb-bdee-ee428107623f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap/deleteAll/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By InValid UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aee98b77-dd85-4154-8669-6848462a15e5",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2bf62c9e-ad0d-4108-a966-8a5420e356fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap/deleteAll/U1000"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId(Empty EndPoint)",
					"id": "fc46ed86-9817-42e4-8e05-86a0fb93b73b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/"
					},
					"response": []
				}
			],
			"id": "755158a2-39da-4e90-a7b6-f21562828da3"
		},
		{
			"name": "Chaining-PositiveScenarios",
			"item": [],
			"id": "d49e09a8-58d4-47b8-8cf0-71ba1cdedf52"
		},
		{
			"name": "Chaining-NegativeScenarios",
			"item": [],
			"id": "81edca4c-d470-42dc-a972-ce90331eafea"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ce9aef6d-3e20-409c-95cf-3e54fde7cbaf",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4ad5d823-c73c-4e57-8f31-1222e518b32b",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var commonTests =()=> {\r",
					"//test header presence\r",
					"     pm.test(\"Content-Type header is present\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\");\r",
					"    });\r",
					"//test header content\r",
					"  pm.test(\"Content-Type header is application/json\", function () {\r",
					"        (pm.response.headers.get(\"Content-Type\")).to.include('application/json');\r",
					"    });\r",
					"    // test response time\r",
					"    pm.test(\"Response time is less than 1000ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"    });\r",
					"\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}