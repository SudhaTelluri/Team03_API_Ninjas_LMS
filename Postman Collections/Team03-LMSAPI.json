{
	"info": {
		"_postman_id": "bc9713a4-d239-4699-a016-f84d721c12e1",
		"name": "Team03-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"//console.log(pm.variables.get(\"baseUrl\"));\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"\r",
									"pm.globals.set(\"bearerToken\",responseBody.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2af2df29-bd34-425d-895b-c66ecb3b4b8e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "51022c25-2583-4424-a087-51c627591440",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"sdet@gmail.com\",\r\n  \"password\": \"LmsHackathon@2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				}
			],
			"id": "7e4608fb-b709-43eb-b667-95a6467e2e0d",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5bcd333-07ae-4a44-91e7-51295397d31c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95bd3ee8-18b7-4542-b24d-9138b3013724",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Add New Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"var programId=responseBody.programId;\r",
									"pm.globals.set(\"programId\",programId);\r",
									"var programName=responseBody.programName;\r",
									"pm.globals.set(\"programName\",programName);\r",
									"console.log(\"ProgramId set as global variable: \" + programId);\r",
									"console.log(\"programName set as global variable: \" + programId);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"const keywords = [\"sdet\", \"java\", \"da\"];\r",
									"\r",
									"// Pick a random keyword from the array\r",
									"const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];\r",
									"\r",
									"// Combine the team name with the random keyword\r",
									"const programName = \"APINinjas-\" + randomKeyword;\r",
									"\r",
									"// Set this as an environment or global variable for use in the request body\r",
									"pm.environment.set(\"randomProgramName\", programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "92d259e8-9ecc-440e-a58a-90ad962a8761",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"programName\": \"{{randomProgramName}}\",\r\n  \"programDescription\": \"A QA team specializes in testing APIs to ensure reliability, performance, and functionality.\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get all Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66a0e297-f71a-4216-9b1e-85d46a535e6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fa28759d-1ffc-45c0-8ff9-2d0f2e9fc3f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all Program with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53da3be7-ff42-4aba-afc7-ec8579c8f6af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2ff256fd-ec25-49e6-ac99-18eb284ff389",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Get progrm by programid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d84d3818-1393-43bc-91d0-bb8a05309b55",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "304852ef-e573-404d-affa-a6991833ddf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/programs/{programId}"
					},
					"response": []
				},
				{
					"name": "Update Program with programid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a90a9e9-ba97-48f2-b7d0-6102c8f2d562",
								"exec": [
									"const teamName = \"APINinjas\"; // Base name of the team\r",
									"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"let suffix = \"\";\r",
									"for (let i = 0; i < 4; i++) {\r",
									"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"}\r",
									"const updatedprogramName = `${teamName}-${suffix}`; \r",
									"\r",
									"// Set the program status\r",
									"//const programStatus = \"Active\";\r",
									"// Set new programName and any other parameters as environment variables\r",
									"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
									"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03df07e7-0adf-40c7-864c-77795f84f699",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.test(\"Status code name has string\", function () {\r",
									"        pm.response.to.have.status(\"Ok\");\r",
									"    });\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a55cd1e5-81d9-4c46-b194-3b4e5bca1f4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{updatedprogramName}}\",\r\n  \"programStatus\": \"{{updatedprogramStatus}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/program/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Update program by programname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d98b9a5a-601a-4ddf-ad76-5e42675a42dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "74b304d5-07e8-4b4e-98ac-ae1e92c9d620",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{progrmstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/putprogram/{{programName}}"
					},
					"response": []
				},
				{
					"name": "Delete program by programname",
					"id": "3b997467-4b7a-498f-a6ec-852ae653a118",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearertoken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/deletebyprogname/{{programName}}}"
					},
					"response": []
				},
				{
					"name": "Delete program by id",
					"id": "0f774259-9010-411b-9eee-ebc719ac3a2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				}
			],
			"id": "15a4228e-04cb-4226-a142-c3c1f52014f0"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a511dc96-25d3-43e8-b6b1-7e28e90ac04e",
								"exec": [
									"// Define team name and retrieve the current serial number\r",
									"const teamName = \"APINinjas\";\r",
									"let serialNumber = parseInt(pm.environment.get(\"batchSerial\")) || 1;\r",
									"\r",
									"// Format the serial number with leading zeros (e.g., \"001\")\r",
									"let formattedSerial = String(serialNumber).padStart(3, '0');\r",
									"\r",
									"// Generate the BatchName based on team name and serial number\r",
									"const batchName = `${teamName}${formattedSerial}`;\r",
									"\r",
									"// Set the batch name in the environment for use in the request body\r",
									"pm.environment.set(\"batchName\", batchName);\r",
									"\r",
									"// Increment the serial number for the next request and update the environment variable\r",
									"pm.environment.set(\"batchSerial\", serialNumber + 1);\r",
									"\r",
									"// Define a storage of batch descriptions\r",
									"const batchDescriptions = [\r",
									"    \"Introductory course for beginners\",\r",
									"    \"Intermediate level for advanced concepts\",\r",
									"    \"Expert level for specialization\"\r",
									"];\r",
									"\r",
									"// Define a storage of batch numbers of classes\r",
									"const batchClasses = [10, 15, 20];\r",
									"\r",
									"// Pick descriptions and classes based on serial number for variety\r",
									"const batchDescription = batchDescriptions[(serialNumber - 1) % batchDescriptions.length];\r",
									"const batchNoOfClasses = batchClasses[(serialNumber - 1) % batchClasses.length];\r",
									"\r",
									"// Set these values in the environment for use in the request body\r",
									"pm.environment.set(\"batchDescription\", batchDescription);\r",
									"pm.environment.set(\"batchNoOfClasses\", batchNoOfClasses);\r",
									"\r",
									"// Log the generated values for debugging\r",
									"console.log(\"Generated Batch Name:\", batchName);\r",
									"console.log(\"Batch Description:\", batchDescription);\r",
									"console.log(\"Batch No Of Classes:\", batchNoOfClasses);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa427889-3590-452f-ac1c-24397d03f3bf",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var responseBody=pm.response.json();\r",
									"var batchId=responseBody.batchId;\r",
									"pm.globals.set(\"batchId\",batchId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ee5c3612-cf48-4e0a-8472-2d308affe305",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": {{programId}},\r\n\"programName\": \"string\"\r\n\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch Copy",
					"id": "bad6b532-bad4-413c-9c4c-873dcbd62e52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "e84c71cb-35cb-4823-9a8b-0b629d6288db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/batches/9178"
					},
					"response": []
				}
			],
			"id": "8c0fb30a-fd51-4a34-83bd-f4ac6da1c23d"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create Class",
					"id": "107df9b8-d531-4906-9b77-8101a11417ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId}},\r\n  \"classComments\": \"Java Opps\",\r\n  \"classDate\": \"2024-11-25\",\r\n  \"classDescription\": \"Java topics going on\",\r\n  \"classNo\": 2,\r\n  \"classNotes\": \"Java\",\r\n  \"classRecordingPath\": \"C:\\\\Recordings\",\r\n  \"classStaffId\": \"U49\",\r\n  \"classTopic\": \"Team03_API_Ninjas\",\r\n  \"classScheduledDates\": [\r\n    \"2024-11-25T15:11:08.750Z\",\r\n    \"2024-12-25T15:11:08.750Z\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"id": "759bc2b3-33f9-43f2-a813-0784a727a834",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/allClasses"
					},
					"response": []
				},
				{
					"name": "Get All Class List Copy",
					"id": "8b749874-3f03-467c-9b9f-397c5ac60e34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/allClasses"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "924ad9d5-9a37-422c-8f56-71e4b27016ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "92ba670a-f05d-4414-bea7-ff5fd0fb98f0"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "fa966a7f-d95a-4fd5-a0db-81870c8cc121"
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es) of All Users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e91fe3ba-8281-4935-9036-e014a358cd6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "68e3d0df-7651-4950-80c5-e23a387701dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap"
					},
					"response": []
				}
			],
			"id": "755158a2-39da-4e90-a7b6-f21562828da3"
		},
		{
			"name": "Chaining-PositiveScenarios",
			"item": [],
			"id": "d49e09a8-58d4-47b8-8cf0-71ba1cdedf52"
		},
		{
			"name": "Chaining-NegativeScenarios",
			"item": [],
			"id": "81edca4c-d470-42dc-a972-ce90331eafea"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f470b4a8-6eda-430d-a48b-d5edb2ab0ca7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e58c4d1-bdca-4720-8efa-398b64345baa",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var commonTests =()=> {\r",
					"//test header presence\r",
					"     pm.test(\"Content-Type header is present\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\");\r",
					"    });\r",
					"//test header content\r",
					"  pm.test(\"Content-Type header is application/json\", function () {\r",
					"        (pm.response.headers.get(\"Content-Type\")).to.include('application/json');\r",
					"    });\r",
					"    // test response time\r",
					"    pm.test(\"Response time is less than 1000ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"    });\r",
					"\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}