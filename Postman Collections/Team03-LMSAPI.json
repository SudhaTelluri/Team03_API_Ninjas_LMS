{
	"info": {
		"_postman_id": "bc9713a4-d239-4699-a016-f84d721c12e1",
		"name": "Team03-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"//console.log(pm.variables.get(\"baseUrl\"));\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"\r",
									"pm.globals.set(\"bearerToken\",responseBody.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2af2df29-bd34-425d-895b-c66ecb3b4b8e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "51022c25-2583-4424-a087-51c627591440",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"sdet@gmail.com\",\r\n  \"password\": \"LmsHackathon@2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "User Login (Unauthorized)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed4bcbea-d5b0-403d-a0b2-c5d04dd2d222",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "40a45021-ef2f-4de0-b67d-9c490d0b9d51",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8b78e116-9005-4c92-a0f0-3aa350d9cc27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmailId\": \"sde@gmail.com\",\n  \"password\": \"LmsHackathon@2024\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login//"
					},
					"response": []
				},
				{
					"name": "User Login (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8846eba7-7a2b-49b7-bd6c-0962dd7035e5",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "878b4d2f-8608-4d6a-9ccf-8f4589b18266",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseURL}}/login/"
					},
					"response": []
				},
				{
					"name": "User Login (Internal Server Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78e8db9-61df-45fe-9f0c-23f5be0aa8c0",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d8a38b86-7cf8-449e-8bce-81c4afcd2b0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseURL}}/login"
					},
					"response": []
				}
			],
			"id": "7e4608fb-b709-43eb-b667-95a6467e2e0d",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5bcd333-07ae-4a44-91e7-51295397d31c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95bd3ee8-18b7-4542-b24d-9138b3013724",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Get all Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66a0e297-f71a-4216-9b1e-85d46a535e6e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fa28759d-1ffc-45c0-8ff9-2d0f2e9fc3f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allPrograms"
							},
							"response": []
						},
						{
							"name": "Get all Program with users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53da3be7-ff42-4aba-afc7-ec8579c8f6af",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2ff256fd-ec25-49e6-ac99-18eb284ff389",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allProgramsWithUsers"
							},
							"response": []
						},
						{
							"name": "Add New Program-program1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
										"exec": [
											"var responseBody=pm.response.json();\r",
											"var programId=responseBody.programId;\r",
											"pm.globals.set(\"programId1\",programId);\r",
											"var programName=responseBody.programName;\r",
											"pm.globals.set(\"programName1\",programName);\r",
											"console.log(\"ProgramId set as global variable: \" + programId);\r",
											"console.log(\"programName set as global variable: \" + programId);\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//validate data type\r",
											"const response = pm.response.json();\r",
											"pm.test('test data-types of the response',()=> {\r",
											"pm.expect(response).to.be.an('object');\r",
											"pm.expect(response.programName).to.be.a('string');\r",
											"pm.expect(response.programStatus).to.be.a('string');\r",
											"pm.expect(response.programDescription).to.be.a('string');\r",
											"pm.expect(response.programId).to.be.a('number');\r",
											"});\r",
											"\r",
											"//validate schema\r",
											"var schema={\r",
											"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
											"'title': 'Generated schema for Root',\r",
											"'type': 'object',\r",
											"'properties': {\r",
											"'programId': {\r",
											"'type': 'number'\r",
											"},\r",
											"'programName': {\r",
											"'type': 'string'\r",
											"},\r",
											"'programDescription': {\r",
											"'type': 'string'\r",
											"},\r",
											"'programStatus': {\r",
											"'type': 'string'\r",
											"},\r",
											"'creationTime': {\r",
											"'type': 'string'\r",
											"},\r",
											"'lastModTime': {\r",
											"'type': 'string'\r",
											"}\r",
											"},\r",
											"'required': [\r",
											"'programId',\r",
											"'programName',\r",
											"'programStatus',\r",
											"'creationTime',\r",
											"'lastModTime'\r",
											"]\r",
											"}\r",
											"pm.test('schema validations',()=>{\r",
											"pm.expect(tv4.validate(response,schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
										"exec": [
											"\r",
											"\r",
											"//// Function to generate a random letter sequence\r",
											"function randomLetters(length) {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate the unique program name\r",
											"const uniqueProgramName = \"APINinjas-\" + randomLetters(5); // '5' is the number of random letters\r",
											"\r",
											"// Set the program name as an environment variable\r",
											"pm.environment.set(\"randomProgramName\", uniqueProgramName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "92d259e8-9ecc-440e-a58a-90ad962a8761",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"programName\": \"{{randomProgramName}}\",\r\n  \"programDescription\": \"SDET-program\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program-program2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
										"exec": [
											"var responseBody=pm.response.json();\r",
											"var programId=responseBody.programId;\r",
											"pm.globals.set(\"programId2\",programId);\r",
											"var programName=responseBody.programName;\r",
											"pm.globals.set(\"programName2\",programName);\r",
											"console.log(\"ProgramId set as global variable: \" + programId);\r",
											"console.log(\"programName set as global variable: \" + programId);\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//validate data type\r",
											"const response = pm.response.json();\r",
											"pm.test('test data-types of the response',()=> {\r",
											"pm.expect(response).to.be.an('object');\r",
											"pm.expect(response.programName).to.be.a('string');\r",
											"pm.expect(response.programStatus).to.be.a('string');\r",
											"pm.expect(response.programDescription).to.be.a('string');\r",
											"pm.expect(response.programId).to.be.a('number');\r",
											"});\r",
											"\r",
											"//validate schema\r",
											"var schema={\r",
											"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
											"'title': 'Generated schema for Root',\r",
											"'type': 'object',\r",
											"'properties': {\r",
											"'programId': {\r",
											"'type': 'number'\r",
											"},\r",
											"'programName': {\r",
											"'type': 'string'\r",
											"},\r",
											"'programDescription': {\r",
											"'type': 'string'\r",
											"},\r",
											"'programStatus': {\r",
											"'type': 'string'\r",
											"},\r",
											"'creationTime': {\r",
											"'type': 'string'\r",
											"},\r",
											"'lastModTime': {\r",
											"'type': 'string'\r",
											"}\r",
											"},\r",
											"'required': [\r",
											"'programId',\r",
											"'programName',\r",
											"'programStatus',\r",
											"'creationTime',\r",
											"'lastModTime'\r",
											"]\r",
											"}\r",
											"pm.test('schema validations',()=>{\r",
											"pm.expect(tv4.validate(response,schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Response time is less than 700ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
										"exec": [
											"\r",
											"\r",
											"//// Function to generate a random letter sequence\r",
											"function randomLetters(length) {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate the unique program name\r",
											"const uniqueProgramName = \"APINinjas-\" + randomLetters(5); // '5' is the number of random letters\r",
											"\r",
											"// Set the program name as an environment variable\r",
											"pm.environment.set(\"randomProgramName\", uniqueProgramName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e664be0a-b421-4a83-bac6-055fd4b2b70c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"programName\": \"{{randomProgramName}}\",\r\n  \"programDescription\": \"SDET-program\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Get program by programid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d84d3818-1393-43bc-91d0-bb8a05309b55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "304852ef-e573-404d-affa-a6991833ddf5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/programs/{{programId}}"
							},
							"response": []
						},
						{
							"name": "Update Program with programid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a90a9e9-ba97-48f2-b7d0-6102c8f2d562",
										"exec": [
											"const teamName = \"APINinjas\"; // Base name of the team\r",
											"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"let suffix = \"\";\r",
											"for (let i = 0; i < 4; i++) {\r",
											"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"}\r",
											"const updatedprogramName = `${teamName}-${suffix}`; \r",
											"\r",
											"// Set the program status\r",
											"//const programStatus = \"Active\";\r",
											"// Set new programName and any other parameters as environment variables\r",
											"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
											"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03df07e7-0adf-40c7-864c-77795f84f699",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"Ok\");\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a55cd1e5-81d9-4c46-b194-3b4e5bca1f4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{updatedprogramName}}\",\r\n  \"programStatus\": \"{{updatedprogramStatus}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/program/{{programName}}"
							},
							"response": []
						},
						{
							"name": "Update program by programname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d98b9a5a-601a-4ddf-ad76-5e42675a42dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"    pm.test(\"Response time is less than 200ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bfd843f-6b88-4a9e-9d29-0f04a86b06f0",
										"exec": [
											"const teamName = \"APINinjas\"; // Base name of the team\r",
											"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"let suffix = \"\";\r",
											"for (let i = 0; i < 4; i++) {\r",
											"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"}\r",
											"const updatedprogramName = `${teamName}-${suffix}`; \r",
											"\r",
											"// Set the program status\r",
											"//const programStatus = \"Active\";\r",
											"// Set new programName and any other parameters as environment variables\r",
											"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
											"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "74b304d5-07e8-4b4e-98ac-ae1e92c9d620",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{updatedprogramName}}\",\r\n  \"programStatus\": \"{{updatedprogramStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/putprogram/{{programId}}"
							},
							"response": []
						},
						{
							"name": "Delete program by programname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58dc2e65-af2d-4514-8108-95da237c4f7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3b997467-4b7a-498f-a6ec-852ae653a118",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/deletebyprogname/{{programName}}"
							},
							"response": []
						},
						{
							"name": "Delete program by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22b664d5-dfbf-4110-8dfd-631ce071def4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0f774259-9010-411b-9eee-ebc719ac3a2b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/deletebyprogid/{{programId1}}"
							},
							"response": []
						}
					],
					"id": "0860e0bb-5db5-4180-8604-9f05b53bf1e4"
				},
				{
					"name": "NegativeScenarios",
					"item": [
						{
							"name": "Add New Program without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a8561d18-acb3-466c-a2d2-697f6462a553",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with missing mandatory field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ee66653c-a978-4070-b71f-8c5d8dbc57f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with program with  existing values in Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "900cae91-cbee-4870-b819-478f49506b7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Sdet\",\r\n  \"programName\": \"Apininjas-\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with Null programStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Define expected Data\r",
											"const expectedData = {\r",
											"    \"message\": \"Invalid Status: must be Active or Inactive\",\r",
											"    \"success\": false\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e46f80a7-00eb-405d-bdbb-dfa4fda62fa1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"Apininjas-\",\r\n  \"programStatus\": \"null\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with Numbers begininng in programDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Define expected Data\r",
											"const expectedData = {\r",
											"    \"message\": \"InvalprogramDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\r",
											"    \"success\": false\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8e8310a7-1edd-4f8a-8999-80562b4da9b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"01\",\r\n  \"programName\": \"Apininjas-\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with programName contain numbers in request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Define expected Data\r",
											"const expectedData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"function validateResponse(actualData) {\r",
											"    // Check if actualData has the same `message` and `success` values as expectedData\r",
											"    return (\r",
											"        actualData.message === expectedData.message &&\r",
											"        actualData.success === expectedData.success\r",
											"    );\r",
											"}\r",
											"\r",
											"// Example usage\r",
											"const actualData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "95156410-38be-41ff-95fb-b3ec1bbe593a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"SDET\",\r\n  \"programName\": \"Apininjas-01\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with all invalid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Define expected Data\r",
											"const expectedData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"function validateResponse(actualData) {\r",
											"    // Check if actualData has the same `message` and `success` values as expectedData\r",
											"    return (\r",
											"        actualData.message === expectedData.message &&\r",
											"        actualData.success === expectedData.success\r",
											"    );\r",
											"}\r",
											"\r",
											"// Example usage\r",
											"const actualData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "21f5803b-60ed-48aa-8a0c-fbfdbf4f3c5b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"***\",\r\n  \"programName\": \"####\",\r\n  \"programStatus\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with all Special characters in programDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the response schema for message and success\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"message\", \"success\"],\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        }\r",
											"    };\r",
											"\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Response time is less than 500ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"    });\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Define expected Data\r",
											"const expectedData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"function validateResponse(actualData) {\r",
											"    // Check if actualData has the same `message` and `success` values as expectedData\r",
											"    return (\r",
											"        actualData.message === expectedData.message &&\r",
											"        actualData.success === expectedData.success\r",
											"    );\r",
											"}\r",
											"\r",
											"// Example usage\r",
											"const actualData = {\r",
											"    \"message\": \"programName Must contain only letters and sometimes hyphens\",\r",
											"    \"success\": false\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "61412750-cdca-46ce-8f9a-a32c47c27696",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"&*#\",\r\n  \"programName\": \"{{programname}}\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Add New Program with all Special characters in programDescription Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46cf5083-2750-45ce-bc1f-23875941b4a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c95f4880-09bb-4c46-b38e-a08506ad940a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"SDET-Java\",\r\n  \"programName\": \"A#$%\",\r\n  \"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Get all Program Negative invalid api",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "debb277b-59db-4043-873d-1515f186797b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "779f6219-4289-4a85-964a-b664750db4be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/allPrograms"
							},
							"response": []
						},
						{
							"name": "Get program by InvalidprogramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d84d3818-1393-43bc-91d0-bb8a05309b55",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "22a5ce83-26d5-43d3-ab95-dd0e49bb0a38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/programs/{{programId}}"
							},
							"response": []
						},
						{
							"name": "Update program by InvalidprogramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d1b22fd-36db-4ae0-880f-fd6147cfa1a2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b21a46b1-021b-4225-bd29-cc0947138f43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"apininjas\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/putprogram/1720"
							},
							"response": []
						},
						{
							"name": "Update program by programId with missing mandatory field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d1b22fd-36db-4ae0-880f-fd6147cfa1a2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4ebc6b94-baf8-4192-8d24-350bff0d7be6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/putprogram/{{programId1}}"
							},
							"response": []
						},
						{
							"name": "Update Program with InvalidprogramName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a90a9e9-ba97-48f2-b7d0-6102c8f2d562",
										"exec": [
											"const teamName = \"APINinjas\"; // Base name of the team\r",
											"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"let suffix = \"\";\r",
											"for (let i = 0; i < 4; i++) {\r",
											"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"}\r",
											"const updatedprogramName = `${teamName}-${suffix}`; \r",
											"\r",
											"// Set the program status\r",
											"//const programStatus = \"Active\";\r",
											"// Set new programName and any other parameters as environment variables\r",
											"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
											"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03df07e7-0adf-40c7-864c-77795f84f699",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"Ok\");\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "513c5a22-26ff-4ecc-afb8-7709af8d1c40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{updatedprogramName}}\",\r\n  \"programStatus\": \"{{updatedprogramStatus}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/program/{{programName}}"
							},
							"response": []
						},
						{
							"name": "Update Program with valid programName with null programStatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a90a9e9-ba97-48f2-b7d0-6102c8f2d562",
										"exec": [
											"const teamName = \"APINinjas\"; // Base name of the team\r",
											"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"let suffix = \"\";\r",
											"for (let i = 0; i < 4; i++) {\r",
											"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"}\r",
											"const updatedprogramName = `${teamName}-${suffix}`; \r",
											"\r",
											"// Set the program status\r",
											"//const programStatus = \"Active\";\r",
											"// Set new programName and any other parameters as environment variables\r",
											"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
											"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03df07e7-0adf-40c7-864c-77795f84f699",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"Ok\");\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "43e0f3dd-3419-411b-9e99-01188ac7d6db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"apininja\",\r\n  \"programStatus\": \"null\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/program/{{programName}}"
							},
							"response": []
						},
						{
							"name": "Update Program with valid programName with missing mandatory field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a90a9e9-ba97-48f2-b7d0-6102c8f2d562",
										"exec": [
											"const teamName = \"APINinjas\"; // Base name of the team\r",
											"const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"let suffix = \"\";\r",
											"for (let i = 0; i < 4; i++) {\r",
											"    suffix += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"}\r",
											"const updatedprogramName = `${teamName}-${suffix}`; \r",
											"\r",
											"// Set the program status\r",
											"//const programStatus = \"Active\";\r",
											"// Set new programName and any other parameters as environment variables\r",
											"pm.environment.set(\"updatedprogramName\", updatedprogramName);\r",
											"pm.environment.set(\"updatedprogramStatus\", \"Active\"); // Or any other valid statu"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03df07e7-0adf-40c7-864c-77795f84f699",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"Ok\");\r",
											"    });\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0b1dbde7-0b7c-4943-86b0-3a3fba79eb65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"updated program\",\r\n  \"programName\": \"{{updatedprogramName}}\",\r\n  \"programStatus\": \"\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/program/{{programName1}}"
							},
							"response": []
						},
						{
							"name": "Delete program by programname Copy",
							"id": "bbfa6005-13a1-463e-b63b-91a470d9224a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/deletebyprogname/apininjas"
							},
							"response": []
						},
						{
							"name": "Delete program by id Copy",
							"id": "73125d30-cf7a-4bef-a5b4-c35597a663ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{bearerToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/deletebyprogid/16874"
							},
							"response": []
						}
					],
					"id": "baf4bd5d-ed4d-4347-b9e4-ac83e39872d3"
				}
			],
			"id": "15a4228e-04cb-4226-a142-c3c1f52014f0"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a511dc96-25d3-43e8-b6b1-7e28e90ac04e",
								"exec": [
									"// Define team name and retrieve the current serial number\r",
									"const teamName = \"APINinjas\";\r",
									"let serialNumber = parseInt(pm.environment.get(\"batchSerial\")) || 1;\r",
									"\r",
									"// Format the serial number with leading zeros (e.g., \"001\")\r",
									"let formattedSerial = String(serialNumber).padStart(3, '0');\r",
									"\r",
									"// Generate the BatchName based on team name and serial number\r",
									"const batchName = `${teamName}${formattedSerial}`;\r",
									"\r",
									"// Set the batch name in the environment for use in the request body\r",
									"pm.environment.set(\"batchName\", batchName);\r",
									"\r",
									"// Increment the serial number for the next request and update the environment variable\r",
									"pm.environment.set(\"batchSerial\", serialNumber + 1);\r",
									"\r",
									"// Define a storage of batch descriptions\r",
									"const batchDescriptions = [\r",
									"    \"Introductory course for beginners\",\r",
									"    \"Intermediate level for advanced concepts\",\r",
									"    \"Expert level for specialization\"\r",
									"];\r",
									"\r",
									"// Define a storage of batch numbers of classes\r",
									"const batchClasses = [10, 15, 20];\r",
									"\r",
									"// Pick descriptions and classes based on serial number for variety\r",
									"const batchDescription = batchDescriptions[(serialNumber - 1) % batchDescriptions.length];\r",
									"const batchNoOfClasses = batchClasses[(serialNumber - 1) % batchClasses.length];\r",
									"\r",
									"// Set these values in the environment for use in the request body\r",
									"pm.environment.set(\"batchDescription\", batchDescription);\r",
									"pm.environment.set(\"batchNoOfClasses\", batchNoOfClasses);\r",
									"\r",
									"// Log the generated values for debugging\r",
									"console.log(\"Generated Batch Name:\", batchName);\r",
									"console.log(\"Batch Description:\", batchDescription);\r",
									"console.log(\"Batch No Of Classes:\", batchNoOfClasses);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa427889-3590-452f-ac1c-24397d03f3bf",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var responseBody=pm.response.json();\r",
									"var batchId=responseBody.batchId;\r",
									"pm.globals.set(\"batchId\",batchId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ee5c3612-cf48-4e0a-8472-2d308affe305",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": {{programId}},\r\n\"programName\": \"string\"\r\n\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch Copy",
					"id": "bad6b532-bad4-413c-9c4c-873dcbd62e52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/batches"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "e84c71cb-35cb-4823-9a8b-0b629d6288db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/batches/9178"
					},
					"response": []
				}
			],
			"id": "8c0fb30a-fd51-4a34-83bd-f4ac6da1c23d"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create Class",
					"id": "107df9b8-d531-4906-9b77-8101a11417ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId}},\r\n  \"classComments\": \"Java Opps\",\r\n  \"classDate\": \"2024-11-25\",\r\n  \"classDescription\": \"Java topics going on\",\r\n  \"classNo\": 2,\r\n  \"classNotes\": \"Java\",\r\n  \"classRecordingPath\": \"C:\\\\Recordings\",\r\n  \"classStaffId\": \"U49\",\r\n  \"classTopic\": \"Team03_API_Ninjas\",\r\n  \"classScheduledDates\": [\r\n    \"2024-11-25T15:11:08.750Z\",\r\n    \"2024-12-25T15:11:08.750Z\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"id": "759bc2b3-33f9-43f2-a813-0784a727a834",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/allClasses"
					},
					"response": []
				},
				{
					"name": "Get All Class List Copy",
					"id": "8b749874-3f03-467c-9b9f-397c5ac60e34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/allClasses"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "924ad9d5-9a37-422c-8f56-71e4b27016ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "92ba670a-f05d-4414-bea7-ff5fd0fb98f0"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "fa966a7f-d95a-4fd5-a0db-81870c8cc121"
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es) of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e91fe3ba-8281-4935-9036-e014a358cd6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "68e3d0df-7651-4950-80c5-e23a387701dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/(404)Batch(es) of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ef8ccba-9b57-4803-96da-481f67a0828b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3c356080-aed2-46d0-8780-28bb3ae9b8a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap/{{UserId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/(401)Batch(es) of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb93699a-fd95-4527-90b9-6dfe17ca7116",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "165bc52e-10bf-40ad-84e0-2e082d5eea5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}/userRoleProgramBatchMap//"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "099c9ffb-7f3d-4850-a1d8-bef2bcb20236",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a3c05586-67af-44fb-bdee-ee428107623f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/U73"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aee98b77-dd85-4154-8669-6848462a15e5",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2bf62c9e-ad0d-4108-a966-8a5420e356fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId(Unauthorized)",
					"id": "fc46ed86-9817-42e4-8e05-86a0fb93b73b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}/U"
					},
					"response": []
				}
			],
			"id": "755158a2-39da-4e90-a7b6-f21562828da3"
		},
		{
			"name": "Chaining-PositiveScenarios",
			"item": [],
			"id": "d49e09a8-58d4-47b8-8cf0-71ba1cdedf52"
		},
		{
			"name": "Chaining-NegativeScenarios",
			"item": [],
			"id": "81edca4c-d470-42dc-a972-ce90331eafea"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f470b4a8-6eda-430d-a48b-d5edb2ab0ca7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e58c4d1-bdca-4720-8efa-398b64345baa",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var commonTests =()=> {\r",
					"//test header presence\r",
					"     pm.test(\"Content-Type header is present\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\");\r",
					"    });\r",
					"//test header content\r",
					"  pm.test(\"Content-Type header is application/json\", function () {\r",
					"        (pm.response.headers.get(\"Content-Type\")).to.include('application/json');\r",
					"    });\r",
					"    // test response time\r",
					"    pm.test(\"Response time is less than 1000ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"    });\r",
					"\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}