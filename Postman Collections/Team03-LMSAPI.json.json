{
	"info": {
		"_postman_id": "a7b3e3d0-d5ca-46ac-b0c5-e8b49c60f278",
		"name": "Team03-API-Ninjas-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"// Parse the response body to JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Set the token as a collection variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseBody.token);\r",
									"pm.collectionVariables.set(\"adminID\", responseBody.userId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"email\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"passwordExpired\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"token\", \"type\", \"userId\", \"email\", \"roles\", \"status\", \"passwordExpired\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20dbbcc1-5438-4726-b580-fc11c0703873",
								"exec": [
									"// Access data from CSV file\r",
									"var userLoginEmailId = pm.iterationData.get(\"userLoginEmailId\");\r",
									"var password = pm.iterationData.get(\"password\");\r",
									"\r",
									"pm.variables.set(\"userLoginEmailId\", userLoginEmailId);\r",
									"pm.variables.set(\"password\", password);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56628f18-f1e0-45dd-9e94-38b11028e6ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}login"
					},
					"response": []
				}
			],
			"id": "2f24a59f-a25a-4f93-970a-7f46f3eb89b8",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5bcd333-07ae-4a44-91e7-51295397d31c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95bd3ee8-18b7-4542-b24d-9138b3013724",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Program Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"//Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"// Increment the iteration count\r",
									"let iterationCount = pm.variables.get(\"iteration\") || 0;\r",
									"pm.variables.set(\"iteration\", iterationCount + 1);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5aae428f-f7c6-4f43-bfea-b83193cf6d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "884eef17-3d76-4ee9-a401-6ff843e4e438",
								"exec": [
									"// Function to generate a random 2-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName2 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName2\", programName2);\r",
									"\r",
									"console.log(\"Generated Program Name 2: \" + programName2);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription2 = pm.iterationData.get(\"programDescription2\");\r",
									"var programStatus2 = pm.iterationData.get(\"programStatus2\");\r",
									"\r",
									"pm.variables.set(\"programDescription2\", programDescription2);\r",
									"pm.variables.set(\"programStatus2\", programStatus2);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdf72ea8-4ce4-4a56-bae6-2c98256fc252",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId2\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", responseBody.programName);\r",
									"    console.log(\"Program ID2: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId2 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f9082391-0355-4e88-9221-8b7f0b89b1d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "994720d9-1a5b-468a-baf7-1f1516663ec0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8fe1d1b9-e08a-499d-b8a9-3add76349abc",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c7c6e893-87c6-48c2-a4ca-e088219bd6f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allPrograms"
					},
					"response": []
				},
				{
					"name": "GET All Programs With Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6c40ddc-4d79-4228-82dc-73a13f089bf4",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4d6d6106-fb5c-47a0-977a-33b2b1028e16",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8339c37b-0e23-4bec-8f00-eea7f83053a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "GET Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22187431-85ed-4455-a2e0-a9abe2deb6a3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c1afb48-9cef-44ba-97d5-f9c43919c8fa",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "554c59d0-ef09-43cb-ab6c-f3eef931ff82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription=pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8dc157f9-39f4-43d3-b9cc-acae027abf3f",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Put Update Program \");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b4e7fd1e-376b-4c0d-b40e-7a71682acf49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"\r",
									"// var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\") || \"A QA team specializing in API testing.-local variable\";\r",
									"// var programStatus = pm.iterationData.get(\"programStatus\") || \"Active\";\r",
									"// var creationTime = pm.iterationData.get(\"creationTime\") || \"2023-10-01T10:00:00Z\";\r",
									"// var lastModTime = pm.iterationData.get(\"lastModTime\") || \"2023-10-02T11:00:00Z\";\r",
									"\r",
									"var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\"); \r",
									"var creationTime = pm.iterationData.get(\"creationTime\");\r",
									"var lastModTime = pm.iterationData.get(\"lastModTime\"); \r",
									"\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"pm.variables.set(\"creationTime\", creationTime);\r",
									"pm.variables.set(\"lastModTime\", lastModTime);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8a9ea2d-3f51-425d-bb0f-4577a3ede583",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f3904322-db09-4dd5-a0a4-af096cd0e4f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\",\r\n  \"creationTime\": \"{{creationTime}}\",\r\n  \"lastModTime\": \"{{lastModTime}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By First ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860bebf4-6cd0-4b3c-8f2c-2e4f444d0744",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9eb36560-263f-4f3f-921a-94950decd5f0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "91b03a05-11f9-4a95-b929-7cc8d5e2effe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By Second ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c9aa0c4-6460-46ed-80e4-3e51b390f74e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"// Retrieve the function from collection variables\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    // Check if status code is 200\r",
									"testHeader(\"Content-Type\"); // Check if the Content-Type header is present\r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7fd5943b-22d9-445c-a6ae-08a3f337a562",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "497d48fe-ec2e-4e50-9d35-df335409cf11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				}
			],
			"id": "50e5aa73-ec90-45aa-b65e-c1f24e764694"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0966d6c3-b935-4641-8021-fa8ef5f549eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"\r",
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Batch Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9420f6dc-9243-453f-9984-258415c5f01e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9601446-8a34-497a-93f0-98d479249a30",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3d3dc43-5ca9-44d3-ba43-f30707642228",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9ae47849-dfdc-4976-b9cb-a76d9ff82ebf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6b1a577-df53-4a69-9909-6d1e6b098eed",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "85324904-4d4d-4695-9eed-2411df306380",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9ec9f80c-0c33-4540-9cc3-4c61a9fe4ef7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32e45809-ef43-49a4-ab29-c176bcb2bbc3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a919f01-7f4b-4522-8134-c66378913f7a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0572519b-ff10-4c33-99f8-d34d8ce23375",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "113757a2-d650-4443-9417-7488d6a5baf2",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f1a027d-6a22-4534-9d57-f1a8847e105e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "11e09bb7-27d2-47c6-bf20-2d283f14980c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5db35245-07ef-43bb-bb1b-9812d6ff3da7",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Advanced\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "99e56636-6743-48c3-971e-777e584be0cf",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"PUT Update Batch\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0473535b-7863-475f-8633-22901eb8ea68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f16ea2b-5d12-4004-949e-e63aea62e5a6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c04b2484-5c13-4371-a4ff-cbbcd57d3a03",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "20befc6a-1773-40a9-ac94-5fb26dc548b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				}
			],
			"id": "ac9d7b66-d62c-4772-a62f-497227fb7256"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ce83e73b-dc22-4fcd-9305-2b11446050ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"//var batchStatus = pm.iterationData.get(\"batchStatus\") || \"Active\";\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "95d40920-0f8c-48e1-b7be-4366ec506e11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									"var responseBody = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = responseBody.csId;\r",
									"var staffId = responseBody.classStaffId;  \r",
									"var classrecordings=responseBody.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "83b4695e-eb34-46e8-9324-05cb4a4b98e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85db0f1d-1503-4219-9134-4df1ca519f5d",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b904a1b-4f73-46a7-ada5-6693f2cef9e2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "738b238e-fd61-46ab-b7e6-51da283f7f58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allClasses"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f18104ec-cf13-4a15-a65f-de245a60b040",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5927ad91-2524-4d82-b337-39783d69156c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "792c9c6d-6a81-4009-b859-1f1de708fea8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Get Class Details By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "109ea8c3-788a-4ca1-bcc1-4f394824479e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dc0d7516-a4eb-4312-b1ae-8f636f6f288e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aa31aed2-d987-4a7b-8037-7096088dd968",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4a4b8-f64c-417f-8163-bca2d1c902b2",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ca3e0a0-59ae-4ac1-aef1-829f8db25798",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a172bb1e-dced-4d19-896a-50b17047a83e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9044f468-2f8c-4e58-8a9d-4d9ecee67bd5",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf4a20d2-7df1-432e-96d8-d28fb99f12d1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "112f60ef-260d-4e10-b7b9-5a4d9c3257a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4281ba45-9621-46a7-b158-51d49a9ac790",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7c6e8da-4c0e-4c01-a960-fdb8f789675e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f87e348a-9335-4e5e-a611-d71e4e6260cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{staffId}}"
					},
					"response": []
				},
				{
					"name": "Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd1ad205-c1bd-4e97-b677-b9df2979b299",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "23774761-8156-4931-83c9-91a37273a5eb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3683219a-ce66-428e-a502-1854038837eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classrecordings"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04e11127-7827-40f1-9969-655095a5c4ab",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b69a3228-d215-49f1-8c94-01bb2f6f9d39",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e6975f62-aa7d-4a6c-8a2c-142ba5b94d0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classRecordings/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Upcoming Classes For Particular Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c0eecc-70cd-4a58-a593-1c39c1e159e9",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a56e2689-9e5c-4987-9daa-ad2b5a55487e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "98941056-483d-4f96-920e-b3dd4f4a8be1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{sampleStudentId}}"
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ccd7857-fdef-4ea2-9f38-5a9d6622db23",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d410085-0fb0-4525-85f3-2414f17aca1f",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"var classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var updatedClassComments = pm.iterationData.get(\"updatedClassComments\");\r",
									"var updatedClassDate = pm.iterationData.get(\"updatedClassDate\");\r",
									"var updatedClassDescription = pm.iterationData.get(\"updatedClassDescription\");\r",
									"var updatedClassNotes = pm.iterationData.get(\"updatedClassNotes\");\r",
									"var updatedClassRecordingPath = pm.iterationData.get(\"updatedClassRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"\r",
									"var updatedClassScheduledDates = pm.iterationData.get(\"updatedClassScheduledDates\");\r",
									"\r",
									"var updatedDateArray = updatedClassScheduledDates.split(',');\r",
									"\r",
									"var formattedUpdatedDates = updatedDateArray.map(dateStr => {\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        return null;\r",
									"    }\r",
									"    return dateObj.toISOString();\r",
									"});\r",
									"\r",
									"var formattedUpdatedClassScheduledDates = formattedUpdatedDates.filter(date => date !== null);\r",
									"\r",
									"console.log(\"Formatted updated classScheduledDates:\", formattedUpdatedClassScheduledDates);\r",
									"\r",
									"pm.variables.set(\"updatedClassScheduledDates\", JSON.stringify(formattedUpdatedClassScheduledDates));\r",
									"\r",
									"var updatedClassNo = formattedUpdatedClassScheduledDates.length;\r",
									"\r",
									"pm.variables.set(\"updatedClassComments\", updatedClassComments);\r",
									"pm.variables.set(\"updatedClassDate\", updatedClassDate);\r",
									"pm.variables.set(\"updatedClassDescription\", updatedClassDescription);\r",
									"pm.variables.set(\"updatedClassNo\", updatedClassNo);\r",
									"pm.variables.set(\"updatedClassNotes\", updatedClassNotes);\r",
									"pm.variables.set(\"updatedClassRecordingPath\", updatedClassRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "90cc3418-16b5-4b98-851c-f3bc69bf7cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{updatedClassComments}}\",\r\n  \"classDate\": \"{{updatedClassDate}}\",\r\n  \"classDescription\": \"{{updatedClassDescription}}\",\r\n  \"classNo\": {{updatedClassNo}},\r\n  \"classNotes\": \"{{updatedClassNotes}}\",\r\n  \"classRecordingPath\": \"{{updatedClassRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{updatedClassScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Update Class Recording Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eee8f240-7518-4336-9f1c-ca8353563680",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "526a9a11-54ac-469f-a315-bc445994d9b2",
								"exec": [
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a4784699-07a9-45ae-b120-aed6bc4d1903",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"csId\": {{classId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClassrecording/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d696b33b-f8d0-43cf-948c-c58d65f7401e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2219e7a-e543-4c37-bcf0-c23176be36fc",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ff196d66-0d2a-43b2-a640-fc8640171819",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By First BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f16ea2b-5d12-4004-949e-e63aea62e5a6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20509bb0-8a9a-4087-beb7-af2084f44a82",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ed040be7-ed96-4d1e-95a2-25429ca001b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By First ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860bebf4-6cd0-4b3c-8f2c-2e4f444d0744",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1733220-412f-4199-94b8-1ddb56be0f5a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "caa7a419-b536-43f2-9fdc-bc6405150e11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				}
			],
			"id": "a5d70a42-b053-4510-a1f9-2c04eb14ff24"
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es)  Of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54d7d250-cff6-4d15-9273-b71cf97d3ce3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "02faa43f-2c9a-4e83-a52e-44beab9d830e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e8123d2e-a509-4628-ad60-7d9c0f68e8bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a554c77-0b2e-4bc5-abe2-7bb19d25f4a0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a19708e-67b6-45ae-babc-300ae3e6fed4",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e6e71188-509f-4089-99b2-86c3fb3a443f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/U57"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b69a247-3934-47f1-88cd-3fff2ef13901",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2a74c5d4-7132-4624-a02c-d4459e537416",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a20c8240-4d46-41ed-bc42-42a44ce1859f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleUserId}}"
					},
					"response": []
				}
			],
			"id": "72aec55b-921c-49c1-a09e-e97657823427"
		},
		{
			"name": "Chaining-End-To-End",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"// Parse the response body to JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Set the token as a collection variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseBody.token);\r",
									"pm.collectionVariables.set(\"adminID\", responseBody.userId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"email\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"passwordExpired\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"token\", \"type\", \"userId\", \"email\", \"roles\", \"status\", \"passwordExpired\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20dbbcc1-5438-4726-b580-fc11c0703873",
								"exec": [
									"// Access data from CSV file\r",
									"var userLoginEmailId = pm.iterationData.get(\"userLoginEmailId\");\r",
									"var password = pm.iterationData.get(\"password\");\r",
									"\r",
									"pm.variables.set(\"userLoginEmailId\", userLoginEmailId);\r",
									"pm.variables.set(\"password\", password);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ff988ff5-d13a-4dfe-af33-d3dc230a6068",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}login"
					},
					"response": []
				},
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Program Creation\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c62a52f5-316a-4cef-b2fd-1529338a6499",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "884eef17-3d76-4ee9-a401-6ff843e4e438",
								"exec": [
									"// Function to generate a random 2-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName2 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName2\", programName2);\r",
									"\r",
									"console.log(\"Generated Program Name 2: \" + programName2);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription2 = pm.iterationData.get(\"programDescription2\");\r",
									"var programStatus2 = pm.iterationData.get(\"programStatus2\");\r",
									"\r",
									"pm.variables.set(\"programDescription2\", programDescription2);\r",
									"pm.variables.set(\"programStatus2\", programStatus2);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdf72ea8-4ce4-4a56-bae6-2c98256fc252",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId2\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", responseBody.programName);\r",
									"    console.log(\"Program ID2: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId2 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bdded5fd-23b0-4cf2-bae3-f39411328e4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "994720d9-1a5b-468a-baf7-1f1516663ec0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "179153c1-f42d-4bd9-824c-5f352f2ffc48",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3b9ce035-29aa-4490-9d54-d1dc0b09b438",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allPrograms"
					},
					"response": []
				},
				{
					"name": "GET All Programs With Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6c40ddc-4d79-4228-82dc-73a13f089bf4",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b0a6a79-58dd-4454-8509-7cbb31979fed",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c97ba19a-eda4-41f0-add4-043f02cf7f82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "GET Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22187431-85ed-4455-a2e0-a9abe2deb6a3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ea5bc638-d419-4d5d-b933-ddaf043462e3",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "67430532-8760-4e67-93ff-97d64b35251b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription=pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8dc157f9-39f4-43d3-b9cc-acae027abf3f",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "92e6a024-09fd-49a2-b797-64f1d65eb42b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\"); \r",
									"var creationTime = pm.iterationData.get(\"creationTime\");\r",
									"var lastModTime = pm.iterationData.get(\"lastModTime\"); \r",
									"\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"pm.variables.set(\"creationTime\", creationTime);\r",
									"pm.variables.set(\"lastModTime\", lastModTime);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8a9ea2d-3f51-425d-bb0f-4577a3ede583",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "59a59a9f-fcfd-4a4a-9c22-131dae50fff9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\",\r\n  \"creationTime\": \"{{creationTime}}\",\r\n  \"lastModTime\": \"{{lastModTime}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860bebf4-6cd0-4b3c-8f2c-2e4f444d0744",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "715a3564-62a1-429d-8ea5-fda12f6ea487",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f8c99c08-4c2b-4360-994f-18deaffd4781",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c9aa0c4-6460-46ed-80e4-3e51b390f74e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"// Retrieve the function from collection variables\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    // Check if status code is 200\r",
									"testHeader(\"Content-Type\"); // Check if the Content-Type header is present\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "96652e07-77c3-4494-86f1-479272999e0c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56f5f8b3-c797-4edd-a970-b616ae9e375f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Create New Batch1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Batch Creation\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b10311c7-e5c9-4d9d-98d5-ca6503da3cef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName2 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName2\", batchName2);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName2);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Beginner\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"];\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName2,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"// Get the batchId from the response body\r",
									"const batchId2 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId2\", batchId2);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId2);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "59f980ce-6b66-485e-a022-10ffef530588",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "588e8edd-6225-451d-8fc1-82b6eed3ffa6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8788fa5-d8a9-4c73-aad6-ef27d71a7ea2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56d32474-f3fc-4714-a4e8-411b6452685e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01a75a58-4cc1-4275-a977-d33d5b73c592",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f116961-8efa-488e-8772-f043f5a1fd15",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e933760d-2638-43b6-b420-fe826bb3d1fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32e45809-ef43-49a4-ab29-c176bcb2bbc3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e554a9-8f95-41bc-9090-f8b5be17d898",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bb8d72e8-1fd9-4054-b3bc-4828a846b0a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "113757a2-d650-4443-9417-7488d6a5baf2",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "44baeabc-ffbe-4814-8904-104ee4b8cbb6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1678c740-ad2e-43d8-9fc5-1f91fc04095a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId2}}"
					},
					"response": []
				},
				{
					"name": "Update By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5db35245-07ef-43bb-bb1b-9812d6ff3da7",
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Advanced\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "99e56636-6743-48c3-971e-777e584be0cf",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f4b48262-d918-4c92-85d4-c6dcc54bbc0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f16ea2b-5d12-4004-949e-e63aea62e5a6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb9ad039-7ae6-4fac-a564-c4397d54afa1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "30fcb60b-e15c-444f-a1bf-3d0f731444a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									"var responseBody = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = responseBody.csId;\r",
									"var staffId = responseBody.classStaffId;  \r",
									"var classrecordings=responseBody.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b96f78fe-c796-4588-ab3c-f79066f24c48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId2}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName2}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85db0f1d-1503-4219-9134-4df1ca519f5d",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0de3f09b-b396-497d-b9f3-d984bf647487",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b1e6653d-7eca-4f34-bd20-54a2c46fa902",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allClasses"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f18104ec-cf13-4a15-a65f-de245a60b040",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ee3c59ca-0b4a-4cb3-a81b-fd5f21a4ea0c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "59cf85dd-8a57-4fbd-a7e7-0540840b80c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Get Class Details By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "109ea8c3-788a-4ca1-bcc1-4f394824479e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf1ef958-4a7f-4ba2-8fd1-edd2952e3f16",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "295e83ee-46fa-4ce6-ae79-6ceec8125de0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4a4b8-f64c-417f-8163-bca2d1c902b2",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6112cf78-f0d6-43ee-879f-bdd64b64d11f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c6e40d4e-1ea9-4f22-b571-e8ab04688699",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9044f468-2f8c-4e58-8a9d-4d9ecee67bd5",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b8ca2e30-28ae-4cc3-bc16-3fed8b3a6e80",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a8f778b-c67a-4bbe-86a7-bd20d9b61cc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4281ba45-9621-46a7-b158-51d49a9ac790",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "900df0e1-8393-47b0-8369-bff570ef550d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0070f064-cf2f-4a1c-8d11-4466be528735",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{staffId}}"
					},
					"response": []
				},
				{
					"name": "Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd1ad205-c1bd-4e97-b677-b9df2979b299",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7205acef-f9d7-42e8-a79c-adf81d53628b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ee58ebac-439e-44f1-8b12-461d1d61c7fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classrecordings"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "309d90a9-8650-4076-b02f-8eb87db5ea4f",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d0d74dab-89fe-40ba-b93a-3f7c64d25343",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e34fa3e0-52ce-4ba0-87e0-b33ff04befb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}download/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Upcoming Classes For Particular Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c0eecc-70cd-4a58-a593-1c39c1e159e9",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54e239a7-d86d-4455-95c1-aadae2bdeb7b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8afc4efc-87d1-4d43-9331-0bcb0218b8c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{sampleStudentId}}"
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ccd7857-fdef-4ea2-9f38-5a9d6622db23",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d24a30e-54f9-4c4f-b177-a69768135b19",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"var classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var updatedClassComments = pm.iterationData.get(\"updatedClassComments\");\r",
									"var updatedClassDate = pm.iterationData.get(\"updatedClassDate\");\r",
									"var updatedClassDescription = pm.iterationData.get(\"updatedClassDescription\");\r",
									"var updatedClassNotes = pm.iterationData.get(\"updatedClassNotes\");\r",
									"var updatedClassRecordingPath = pm.iterationData.get(\"updatedClassRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"\r",
									"var updatedClassScheduledDates = pm.iterationData.get(\"updatedClassScheduledDates\");\r",
									"\r",
									"var updatedDateArray = updatedClassScheduledDates.split(',');\r",
									"\r",
									"var formattedUpdatedDates = updatedDateArray.map(dateStr => {\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        return null;\r",
									"    }\r",
									"    return dateObj.toISOString();\r",
									"});\r",
									"\r",
									"var formattedUpdatedClassScheduledDates = formattedUpdatedDates.filter(date => date !== null);\r",
									"\r",
									"console.log(\"Formatted updated classScheduledDates:\", formattedUpdatedClassScheduledDates);\r",
									"\r",
									"pm.variables.set(\"updatedClassScheduledDates\", JSON.stringify(formattedUpdatedClassScheduledDates));\r",
									"\r",
									"var updatedClassNo = formattedUpdatedClassScheduledDates.length;\r",
									"\r",
									"pm.variables.set(\"updatedClassComments\", updatedClassComments);\r",
									"pm.variables.set(\"updatedClassDate\", updatedClassDate);\r",
									"pm.variables.set(\"updatedClassDescription\", updatedClassDescription);\r",
									"pm.variables.set(\"updatedClassNo\", updatedClassNo);\r",
									"pm.variables.set(\"updatedClassNotes\", updatedClassNotes);\r",
									"pm.variables.set(\"updatedClassRecordingPath\", updatedClassRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9e3cb8ad-b309-4e5c-90ff-c16551de7285",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId2}},\r\n  \"classComments\": \"{{updatedClassComments}}\",\r\n  \"classDate\": \"{{updatedClassDate}}\",\r\n  \"classDescription\": \"{{updatedClassDescription}}\",\r\n  \"classNo\": {{updatedClassNo}},\r\n  \"classNotes\": \"{{updatedClassNotes}}\",\r\n  \"classRecordingPath\": \"{{updatedClassRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName2}}\",\r\n  \"classScheduledDates\": {{updatedClassScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Update Class Recording Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eee8f240-7518-4336-9f1c-ca8353563680",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fa0c176c-fbdc-497a-81e9-f87a427501e1",
								"exec": [
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "192217de-6232-402d-a489-7206f3164c9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"csId\": {{classId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClassrecording/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d696b33b-f8d0-43cf-948c-c58d65f7401e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d59cbfc8-fee9-4f7a-bd46-5f537826267f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3d829228-d4b3-4da5-82db-3d243b782f0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch(es)  Of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54d7d250-cff6-4d15-9273-b71cf97d3ce3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2f11c85-bccb-40ff-9c2c-75bb93513bc5",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "50a3dddb-43e6-4f2f-a133-c39059593708",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a554c77-0b2e-4bc5-abe2-7bb19d25f4a0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "10deb69a-e824-41f2-b473-6d26ba0854ea",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "367718db-adc3-4a6e-a2c2-417f0ea2ccd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/{{userIdForProgramBatchMap}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By Second BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f16ea2b-5d12-4004-949e-e63aea62e5a6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d79867e-45cd-4839-b099-69a4d937ecfb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46a67ce9-ca56-4840-88a0-805604d5c830",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b69a247-3934-47f1-88cd-3fff2ef13901",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f3f9c38-bf0f-4821-b1c7-713e0db4a920",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6b1d1ede-c9ca-411b-b8a4-dd5a2b9f13eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleUserId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By Second ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c9aa0c4-6460-46ed-80e4-3e51b390f74e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7731f387-fbec-4cd0-b653-dc44a2944296",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d4eec8b1-cddb-489e-9345-f4d3be824029",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				}
			],
			"id": "f52e8471-4ccb-4664-b502-a663870764aa"
		},
		{
			"name": "Chaining-NegativeScenarios-sudha",
			"item": [
				{
					"name": "Add New Program1 To Test Neg Scenarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);\r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"//Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "737649b8-d8ec-436f-9a74-058a59159ec3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1109de00-c2ae-4b57-9cae-e250dbd5d009",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create Class To Test Neg Scenarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a00af8e9-6620-4cba-8bb0-9bd144e02160",
								"exec": [
									"var response = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = response.csId;\r",
									"var staffId = response.classStaffId;  \r",
									"var classrecordings=response.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76ea4d3f-0c55-419e-840f-a0525bd7fab8",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cf029b0f-d3a3-4f1b-aceb-866dceba5d71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Create Duplicate ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response indicates an error (success is false)\r",
									"if (responseBody.success === false) {\r",
									"    // Print the error message from the response\r",
									"    console.error(\"Error: \" + responseBody.message);\r",
									"} else if (responseBody && responseBody.programId) {\r",
									"    // If the response contains programId and programName, print them\r",
									"    console.log(\"Program ID: \" + responseBody.programId);\r",
									"    console.log(\"Program Name: \" + responseBody.programName);\r",
									"} else {\r",
									"    // If neither condition is met, log a failure\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertNotFoundErrorString = pm.collectionVariables.get(\"assertNotFoundError\");\r",
									"\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertNotFoundError = eval(`(${assertNotFoundErrorString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\");\r",
									"\r",
									"// Construct the expected error message\r",
									"const expectedMessage = \"cannot create program , since already exists\";\r",
									"\r",
									"// Check if the response body contains the expected message and status is false\r",
									"pm.test(\"Response contains expected message and status is false\", function() {\r",
									"    pm.expect(responseBody).to.have.property(\"message\", expectedMessage);\r",
									"    pm.expect(responseBody).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "54f08d5f-7917-407f-a621-005e7c873fb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-Create Program With Inavlid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response indicates an error (success is false)\r",
									"if (responseBody.success === false) {\r",
									"    // Print the error message from the response\r",
									"    console.error(\"Error: \" + responseBody.message);\r",
									"} else if (responseBody && responseBody.programId) {\r",
									"    // If the response contains programId and programName, print them\r",
									"    console.log(\"Program ID: \" + responseBody.programId);\r",
									"    console.log(\"Program Name: \" + responseBody.programName);\r",
									"} else {\r",
									"    // If neither condition is met, log a failure\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertNotFoundErrorString = pm.collectionVariables.get(\"assertNotFoundError\");\r",
									"\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertNotFoundError = eval(`(${assertNotFoundErrorString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\");\r",
									"\r",
									"// Construct the expected error message\r",
									"const expectedMessage = \"cannot create program , since already exists\";\r",
									"\r",
									"// Check if the response body contains the expected message and status is false\r",
									"pm.test(\"Response contains expected message and status is false\", function() {\r",
									"    pm.expect(responseBody).to.have.property(\"message\", expectedMessage);\r",
									"    pm.expect(responseBody).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"var invalidProgramDescription = pm.iterationData.get(\"invalidProgramDescription\");\r",
									"var invalidProgramName = pm.iterationData.get(\"invalidProgramName\");\r",
									"var invalidProgramStauts = pm.iterationData.get(\"invalidProgramStauts\");\r",
									"\r",
									"pm.variables.set(\"invalidProgramDescription\", invalidProgramDescription);\r",
									"pm.variables.set(\"invalidProgramName\", invalidProgramName);\r",
									"pm.variables.set(\"invalidProgramStauts\", invalidProgramStauts);\r",
									"\r",
									"let iterationCount = pm.environment.get(\"iterationCount\") || 0;\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7146bf14-62bb-4b48-87f3-bcc705d45316",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{invalidProgramName}}\",\r\n  \"programDescription\": \"{{invalidProgramDescription}}\",\r\n  \"programStatus\": \"{{invalidProgramStauts}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(401);    \r",
									"testStatusLine(401,\"Unauthorized\")\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "74dad5b3-57ce-48ba-becf-119699b9be3e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"//Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f8851f1f-6f51-406f-9558-975269e7a8d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program with missing mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "421b8bfa-e240-43f5-be20-f9adb85aa329",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response schema for message and success\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        required: [\"message\", \"success\"],\r",
									"        properties: {\r",
									"            message: { type: \"string\" },\r",
									"            success: { type: \"boolean\" }\r",
									"        }\r",
									"    };\r",
									"\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    pm.test(\"Response time is less than 500ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1d8f715e-5e9a-4c7a-a744-15756f5a837c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-Create Program with Null Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(500);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(500,\"Internal Server Error\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programName = pm.iterationData.get(\"programName\");\r",
									"var nullProgramStauts = pm.iterationData.get(\"nullProgramStauts\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programName\", programName);\r",
									"pm.variables.set(\"nullProgramStauts\", nullProgramStauts);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c281c49a-76c6-4540-9ec7-a8619a516b88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{nullProgramStauts}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-CreateBatch-BadRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df0389b8-5a1c-4b3d-bbbe-52c857c347b1",
								"exec": [
									"var batchDescription = pm.iterationData.get(\"batchDescription\");\r",
									"var outOfScopeBatchNoOfClasses = pm.iterationData.get(\"outOfScopeBatchNoOfClasses\");\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"pm.variables.set(\"batchDescription\", batchDescription);\r",
									"pm.variables.set(\"outOfScopeBatchNoOfClasses\", outOfScopeBatchNoOfClasses);\r",
									"pm.variables.set(\"batchStatus\", batchStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe3f0d1f-50b9-4d9f-8828-1905f489ba45",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "48f19c1a-f541-4115-9c35-a7c37ac7d680",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"batchNoOfClasses\": {{outOfScopeBatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{programName1}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Neg-Create Batch With Invalid Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df0389b8-5a1c-4b3d-bbbe-52c857c347b1",
								"exec": [
									"var invalidBatchDescription = pm.iterationData.get(\"invalidBatchDescription\");\r",
									"var invalidBatchNoOfClasses = pm.iterationData.get(\"invalidBatchNoOfClasses\");\r",
									"var invalidBatchStatus = pm.iterationData.get(\"invalidBatchStatus\");\r",
									"var invalidBatchName = pm.iterationData.get(\"invalidBatchName\");\r",
									"var invalidProgramId = pm.iterationData.get(\"invalidProgramId\");\r",
									"var invalidProgramName = pm.iterationData.get(\"invalidProgramName\");\r",
									"\r",
									"pm.variables.set(\"invalidBatchDescription\", invalidBatchDescription);\r",
									"pm.variables.set(\"invalidBatchNoOfClasses\", invalidBatchNoOfClasses);\r",
									"pm.variables.set(\"invalidBatchStatus\", invalidBatchStatus);\r",
									"pm.variables.set(\"invalidBatchName\", invalidBatchName);\r",
									"pm.variables.set(\"invalidProgramId\", invalidProgramId);\r",
									"pm.variables.set(\"invalidProgramName\", invalidProgramName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe3f0d1f-50b9-4d9f-8828-1905f489ba45",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b1f94b1d-aaac-4cf9-a308-9e5f2bac6c4b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{invalidBatchDescription}}\",\r\n  \"batchName\": \"{{invalidBatchName}}\",\r\n  \"batchNoOfClasses\": {{invalidBatchNoOfClasses}},\r\n  \"batchStatus\": \"{{invalidBatchStatus}}\",\r\n  \"programId\": \"{{invalidProgramId}}\",\r\n  \"programName\": \"{{invalidProgramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Neg-Duplicate Class Topic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"var classTopic=pm.collectionVariables.get(classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Class Topic \", classTopic);\r",
									"\r",
									"// Retrieve iteration data or set default values for other variables\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"// Get the classScheduledDates variable (either from iteration data or a default value)\r",
									"let classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e0c6fbd2-a1b8-46b2-9a93-01b84635ff9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Create Class With Invalid Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve iteration data or set default values for other variables\r",
									"var invalidClassComments = pm.iterationData.get(\"invalidClassComments\");\r",
									"var invalidClassDate = pm.iterationData.get(\"invalidClassDate\");\r",
									"var invalidClassDescription = pm.iterationData.get(\"invalidClassDescription\");\r",
									"var invalidClassNo = pm.iterationData.get(\"invalidClassNo\");\r",
									"var invalidClassNotes = pm.iterationData.get(\"invalidClassNotes\");\r",
									"var invalidClassRecordingPath = pm.iterationData.get(\"invalidClassRecordingPath\");\r",
									"var invalidClassStaffId = pm.iterationData.get(\"invalidClassStaffId\");\r",
									"var invalidClassStatus = pm.iterationData.get(\"invalidClassStatus\");\r",
									"var invalidBatchId = pm.iterationData.get(\"invalidBatchId\");\r",
									"var invalidClassTopic = pm.iterationData.get(\"invalidClassTopic\");\r",
									"var invalidBatchName = pm.iterationData.get(\"invalidBatchName\");\r",
									"// Get the classScheduledDates variable (either from iteration data or a default value)\r",
									"let classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"invalidClassComments\", invalidClassComments);\r",
									"pm.variables.set(\"invalidClassDate\", invalidClassDate);\r",
									"pm.variables.set(\"invalidClassDescription\", invalidClassDescription);\r",
									"pm.variables.set(\"invalidClassNo\", invalidClassNo);\r",
									"pm.variables.set(\"invalidClassNotes\", invalidClassNotes);\r",
									"pm.variables.set(\"invalidClassRecordingPath\", invalidClassRecordingPath);\r",
									"pm.variables.set(\"invalidClassStaffId\", invalidClassStaffId);\r",
									"pm.variables.set(\"invalidClassStatus\", invalidClassStatus);\r",
									"pm.variables.set(\"invalidBatchId\", invalidBatchId);\r",
									"pm.variables.set(\"invalidClassTopic\", invalidClassTopic);\r",
									"pm.variables.set(\"invalidBatchName\", invalidBatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8d4eeea1-75a7-468d-8b7d-3bd43da9f3b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{invalidBatchId}},\r\n  \"classComments\": \"{{invalidClassComments}}\",\r\n  \"classDate\": \"{{invalidClassDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{invalidClassNo}},\r\n  \"classNotes\": \"{{invalidClassNotes}}\",\r\n  \"classRecordingPath\": \"{{invalidClassRecordingPath}}\",\r\n  \"classStaffId\": \"{{invalidClassStaffId}}\",\r\n  \"classTopic\": \"{{invalidClassTopic}}\",\r\n  \"classStatus\": \"{{invalidClassStatus}}\",\r\n  \"batchName\": \"{{invalidBatchName}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Get Program with Invalid Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74323826-886a-4628-90c4-8137d66a8cf0",
								"exec": [
									" var responseBody = pm.response.json();\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"assertMessageAndSuccess(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2f3854e-07b5-4ced-82f7-9e555c82e42f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6ba19cfc-80cc-4e7c-8def-c118db3ac205",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch by Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a242a103-894b-43fb-a67a-2ae0a54fd652",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3ba8b48e-9abf-4111-9177-b05967897199",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2ae2a58-59e0-4162-a82a-3500508bc9d0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "887f7573-bb70-4267-9de2-bc8697051dd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{invalidBatchName}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89c5702b-33c6-42bb-bbb7-7d9a9038f3ba",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"try {\r",
									"    var responseBody = pm.response.json();\r",
									"    assertMessageAndSuccess(responseBody);\r",
									"} catch (e) {\r",
									"    console.error(\"Response is not JSON or empty:\", pm.response.text());\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c0c28988-035b-4d37-bf6a-f4122e7bfb85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c368bf1d-047f-4a4b-9c10-6fb97c97c2d0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fac5cbf9-d108-44ad-bbb5-3e50bb8a193b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Details By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d750a0e5-482e-4de1-aae7-794b78a0b1e3",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "82740fc7-8b4d-4d4a-9367-488732e0d626",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get All Classes By Invalid Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8aecf30b-d5fd-4108-b3d4-383d0986fb08",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2158a825-64eb-4689-b442-6d6d7bdbf2fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{invalidClassTopic}}"
					},
					"response": []
				},
				{
					"name": "Neg-GetClasses_WithNonExistingBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d0d74f4-e189-47b7-a349-a7493698443f",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "419e8955-8918-4ed4-8d6d-606cb34f954d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get All Classes By Invalid StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc46e915-6e63-493a-b1c5-3c9a71412446",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "097eddc4-e570-4f7e-8506-d50e74a1dd99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{invalidStaffId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "820a181e-5f07-470a-b098-69e1b5949f02",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5c124f53-d85a-4aea-889d-96322fa8e749",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classRecordings/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GetUpcomingClasses_InvalidStudentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c42286bc-592b-42c9-85e9-0f7e528e46f0",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"\r",
									"pm.expect(responseBody).to.be.an(\"array\").that.is.empty;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5fc32899-1312-472c-bffd-24b93f7f5fc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{invalidStudentId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c9774bd-8cac-4ac5-bfd5-1705b28f812e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "73d3af1f-864a-4180-8af3-ad4de221b5c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}download/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By Invalid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc9c4f08-5f67-49da-83d7-e0b32f71ab25",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c5d4a8e-5524-4421-967f-7d49aec5e373",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/{{sampleInvalidUserId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program with Invalid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var invalidProgramName = pm.iterationData.get(\"invalidProgramName\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"invalidProgramName\", invalidProgramName);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "17c3657a-69b2-4dff-a5bc-fcfdb1963d44",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\");\r",
									"\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7090bef5-7fac-40b3-8c92-63d795fe12f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{invalidProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{invalidProgramName}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"var noProgramDescription = pm.iterationData.get(\"noProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"noProgramDescription\", noProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4811865-7084-4749-a3cc-d7b74be9431d",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49c3da04-e2c8-4baf-bc51-d309f5666103",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{noProgramDescription}}\",\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program by Invalid ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var invalidProgramId = pm.iterationData.get(\"invalidProgramId\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"invalidProgramId\", invalidProgramId);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd4fb289-b071-4327-94ec-c51ee5ee8a9a",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6c943492-241a-48ca-bae4-47ce054c8ef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programId\": {{invalidProgramId}},\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var nullProgramName = pm.iterationData.get(\"nullProgramName\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"nullProgramName\", nullProgramName);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51d660ce-93c1-4290-b4c9-608730027d56",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a7fd0c9-2b0b-425b-9d37-803500d4ec59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programId\": {{programId1}},\r\n  \"programName\": \"{{nullProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Batch By Invalid Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5db35245-07ef-43bb-bb1b-9812d6ff3da7",
								"exec": [
									"var invalidBatchDescription = pm.iterationData.get(\"invalidBatchDescription\");\r",
									"var missingBatchName = pm.iterationData.get(\"missingBatchName\");\r",
									"var invalidBatchNoOfClasses = pm.iterationData.get(\"invalidBatchNoOfClasses\");\r",
									"var invalidBatchStatus = pm.iterationData.get(\"invalidBatchStatus\");\r",
									"var invalidProgramId = pm.iterationData.get(\"invalidProgramId\");\r",
									"var nullProgramName = pm.iterationData.get(\"nullProgramName\");\r",
									"\r",
									"pm.variables.set(\"invalidBatchDescription\", invalidBatchDescription);\r",
									"pm.variables.set(\"missingBatchName\", missingBatchName);\r",
									"pm.variables.set(\"invalidBatchNoOfClasses\", invalidBatchNoOfClasses);\r",
									"pm.variables.set(\"invalidBatchStatus\", invalidBatchStatus);\r",
									"pm.variables.set(\"invalidProgramId\", invalidProgramId);\r",
									"pm.variables.set(\"nullProgramName\", nullProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c79699df-a02b-41b7-ad87-736f67609a76",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ad8e4606-3dd9-4352-9716-4373b5cbe43a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{invalidBatchDescription}}\",\r\n    \"batchName\": \"{{missingBatchName}}\",\r\n    \"batchNoOfClasses\": \"{{invalidBatchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{invalidBatchStatus}}\",\r\n    \"programId\": \"{{invalidProgramId}}\",\r\n    \"programName\": \"{{nullProgramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Class By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee23d99d-b549-4c02-96a2-5c65b9ae7ee8",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0e223b46-437b-426d-8b79-7f304bac9dea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Batch with Non-Existing BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00535da0-446b-42ce-9d97-db64e70c84f6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "30378a49-05d6-471a-bd14-62253d30c6db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860bebf4-6cd0-4b3c-8f2c-2e4f444d0744",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"// var responseBody=pm.response.json();\r",
									"// assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ea91d0e5-965e-4f8f-9745-8b841e399421",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c9aa0c4-6460-46ed-80e4-3e51b390f74e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "80bd28df-ad9c-460d-a496-490f765b7ca2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc55c52f-a8ef-43e9-936b-06e2a53a7d16",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7c3b9647-a9b2-4b0d-99e1-adc226de4132",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5583272a-9001-4b10-8535-475b798f1309",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a0f7cd17-e7bc-4172-91d4-1b246160d1b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId2}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By InvalidUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1559c77a-ee3b-4094-9fa0-dde466f7afca",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f73dff6c-5f17-4bb2-8490-e1b83897b626",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleInvalidUserId}}"
					},
					"response": []
				}
			],
			"id": "2bb4b8bf-ca08-4c8a-8830-ae9b9503323b"
		},
		{
			"name": "CleanUp And Logout",
			"item": [
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d696b33b-f8d0-43cf-948c-c58d65f7401e",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "951de306-0996-42ac-9d57-5736559e0b6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f16ea2b-5d12-4004-949e-e63aea62e5a6",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5308e743-93df-439e-819a-7ee6f8d0dc2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "860bebf4-6cd0-4b3c-8f2c-2e4f444d0744",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "efdf6b1e-6eec-458a-8de7-3bd7ed25a179",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "User Log Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2627e90-1d95-4ea3-ad35-45964f1461d8",
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4301e05c-1e0c-4f81-8dfa-29f9e4fc6973",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}logoutlms"
					},
					"response": []
				}
			],
			"id": "a2b2e158-e9b1-4566-843d-d4ca160937be"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d1e55c5c-7844-44d5-839c-9f1f5a1c6e26",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cc4bb591-d7cf-462d-b37c-849c7c8be327",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Define reusable test functions\r",
					"function testResponseTime(maxTime) {\r",
					"    pm.test(`Response time is less than ${maxTime}ms`, () => {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(maxTime);\r",
					"    });\r",
					"}\r",
					"\r",
					"function testStatusCode(expectedStatus) {\r",
					"    pm.test(`Status code is ${expectedStatus}`, () => {\r",
					"        pm.response.to.have.status(expectedStatus);\r",
					"    });\r",
					"}\r",
					"\r",
					"function testHeader(headerName) {\r",
					"    pm.test(`Header \"${headerName}\" is present`, () => {\r",
					"        pm.response.to.have.header(headerName);\r",
					"    });\r",
					"}\r",
					"\r",
					"var testStatusLine = function(expectedStatusCode, expectedStatusMessage) {\r",
					"    pm.test(`Status line should be \"${expectedStatusCode} ${expectedStatusMessage}\"`, function () {\r",
					"        pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
					"        pm.expect(pm.response.status).to.eql(expectedStatusMessage);\r",
					"    });\r",
					"};\r",
					"\r",
					"function assertNotFoundError(responseBody, expectedMessage) {\r",
					"    pm.test(\"Error message is as expected\", function () {\r",
					"        pm.expect(responseBody.message.trim()).to.eql(expectedMessage.trim());\r",
					"    });\r",
					"\r",
					"    pm.test(\"Success is false\", function () {\r",
					"        pm.expect(responseBody.success).to.be.false;\r",
					"    });\r",
					"}\r",
					"\r",
					"function assertMessageAndSuccess(responseBody,) {\r",
					"    pm.test(\"Response contains a message and success is false\", function() {\r",
					"        // Ensure that the response contains the 'message' property\r",
					"        pm.expect(responseBody).to.have.property(\"message\");\r",
					"        // Logs the message to console\r",
					"                 console.log(\"Message content:\", responseBody.message); \r",
					"                      \r",
					"        // Ensure that the 'success' field is false\r",
					"        pm.expect(responseBody).to.have.property(\"success\", false);\r",
					"    });\r",
					"}\r",
					"\r",
					"function validateSchema(data, schema, testName) {\r",
					"    var Ajv = require('ajv');\r",
					"    var ajv = new Ajv();\r",
					"\r",
					"    // Compile the schema with AJV\r",
					"    var validate = ajv.compile(schema);\r",
					"    var isValid = validate(data);\r",
					"\r",
					"    // Postman test for schema validation\r",
					"    pm.test(testName + \" Schema validation\", function () {\r",
					"        pm.expect(isValid).to.be.true;\r",
					"    });\r",
					"\r",
					"    // If validation fails, log errors\r",
					"    if (!isValid) {\r",
					"        console.log(testName + \" Schema validation error:\", validate.errors);\r",
					"    }\r",
					"}\r",
					"\r",
					"//Save the functions globally within the collection for use\r",
					"pm.collectionVariables.set(\"testResponseTime\", testResponseTime.toString());\r",
					"pm.collectionVariables.set(\"testStatusCode\", testStatusCode.toString());\r",
					"pm.collectionVariables.set(\"testHeader\", testHeader.toString());\r",
					"pm.collectionVariables.set(\"testStatusLine\", testStatusLine.toString());\r",
					"pm.collectionVariables.set(\"assertNotFoundError\", assertNotFoundError.toString());\r",
					"pm.collectionVariables.set(\"assertMessageAndSuccess\", assertMessageAndSuccess.toString());\r",
					"pm.collectionVariables.set(\"validateSchema\", validateSchema.toString());\r",
					"\r",
					"\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJTZGV0QGdtYWlsLmNvbSIsImlhdCI6MTczMTM3OTYyMywiZXhwIjoxNzMxNDA4NDIzfQ.19lGyd6Ycs8n2luRm8gF6h1oYRYcnm007gfQvoWrfcSW_uAummirYejqcI-1eQ0Bykip2WcUId84ct7Q9N9vHQ"
		},
		{
			"key": "programName1",
			"value": "APINinjas-HbGO"
		},
		{
			"key": "programName2",
			"value": "APINinjas-xRdf"
		},
		{
			"key": "programId1",
			"value": 17503
		},
		{
			"key": "programId2",
			"value": 17489
		},
		{
			"key": "updatedProgramName",
			"value": "APINinjas-Dr"
		},
		{
			"key": "batchName1",
			"value": "APINinjas-UQlQ742"
		},
		{
			"key": "batchName2",
			"value": "APINinjas-xRdf316"
		},
		{
			"key": "batchId2",
			"value": 9495
		},
		{
			"key": "batchId1",
			"value": 9496
		},
		{
			"key": "classTopic",
			"value": "APINinjas-UuRe8438 An introduction to AI"
		},
		{
			"key": "classId",
			"value": 758
		},
		{
			"key": "staffId",
			"value": "U53"
		},
		{
			"key": "classrecordings",
			"value": "",
			"disabled": true
		},
		{
			"key": "sampleStudentId",
			"value": "U54",
			"type": "string"
		},
		{
			"key": "invalidClassId",
			"value": "2000",
			"type": "string"
		},
		{
			"key": "invalidStudentId",
			"value": "U500",
			"type": "string"
		},
		{
			"key": "invalidStaffId",
			"value": "U1000",
			"type": "string"
		},
		{
			"key": "invalidBatchId",
			"value": "30",
			"type": "string"
		},
		{
			"key": "invalidClassTopic",
			"value": ".net introduction",
			"type": "string"
		},
		{
			"key": "sampleUserId",
			"value": "U29",
			"type": "string"
		},
		{
			"key": "sampleInvalidUserId",
			"value": "U7",
			"type": "string"
		},
		{
			"key": "sampleUserIdOfUser",
			"value": "U57",
			"type": "string"
		},
		{
			"key": "testResponseTime",
			"value": "function testResponseTime(maxTime) {\r\n    pm.test(`Response time is less than ${maxTime}ms`, () => {\r\n        pm.expect(pm.response.responseTime).to.be.below(maxTime);\r\n    });\r\n}"
		},
		{
			"key": "testStatusCode",
			"value": "function testStatusCode(expectedStatus) {\r\n    pm.test(`Status code is ${expectedStatus}`, () => {\r\n        pm.response.to.have.status(expectedStatus);\r\n    });\r\n}"
		},
		{
			"key": "testHeader",
			"value": "function testHeader(headerName) {\r\n    pm.test(`Header \"${headerName}\" is present`, () => {\r\n        pm.response.to.have.header(headerName);\r\n    });\r\n}"
		},
		{
			"key": "testStatusLine",
			"value": "function(expectedStatusCode, expectedStatusMessage) {\r\n    pm.test(`Status line should be \"${expectedStatusCode} ${expectedStatusMessage}\"`, function () {\r\n        pm.expect(pm.response.code).to.eql(expectedStatusCode);\r\n        pm.expect(pm.response.status).to.eql(expectedStatusMessage);\r\n    });\r\n}"
		},
		{
			"key": "userIdForProgramBatchMap",
			"value": "U57",
			"type": "string"
		},
		{
			"key": "invalidBatchName",
			"value": "samplebatch",
			"type": "string"
		},
		{
			"key": "invalidProgramId",
			"value": "55",
			"type": "string"
		},
		{
			"key": "invalidProgramName",
			"value": "APINinjas",
			"type": "string"
		},
		{
			"key": "assertNotFoundError",
			"value": "function assertNotFoundError(responseBody, expectedMessage) {\r\n    pm.test(\"Error message is as expected\", function () {\r\n        pm.expect(responseBody.message.trim()).to.eql(expectedMessage.trim());\r\n    });\r\n\r\n    pm.test(\"Success is false\", function () {\r\n        pm.expect(responseBody.success).to.be.false;\r\n    });\r\n}"
		},
		{
			"key": "assertMessageAndSuccess",
			"value": "function assertMessageAndSuccess(responseBody,) {\r\n    pm.test(\"Response contains a message and success is false\", function() {\r\n        // Ensure that the response contains the 'message' property\r\n        pm.expect(responseBody).to.have.property(\"message\");\r\n        // Logs the message to console\r\n                 console.log(\"Message content:\", responseBody.message); \r\n                      \r\n        // Ensure that the 'success' field is false\r\n        pm.expect(responseBody).to.have.property(\"success\", false);\r\n    });\r\n}"
		},
		{
			"key": "baseURL",
			"value": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/",
			"type": "string"
		},
		{
			"key": "validateSchema",
			"value": "function validateSchema(data, schema, testName) {\r\n    var Ajv = require('ajv');\r\n    var ajv = new Ajv();\r\n\r\n    // Compile the schema with AJV\r\n    var validate = ajv.compile(schema);\r\n    var isValid = validate(data);\r\n\r\n    // Postman test for schema validation\r\n    pm.test(testName + \" Schema validation\", function () {\r\n        pm.expect(isValid).to.be.true;\r\n    });\r\n\r\n    // If validation fails, log errors\r\n    if (!isValid) {\r\n        console.log(testName + \" Schema validation error:\", validate.errors);\r\n    }\r\n}"
		},
		{
			"key": "adminID",
			"value": ""
		},
		{
			"key": "classrecordings",
			"value": ""
		}
	]
}