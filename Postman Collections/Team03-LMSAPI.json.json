{
	"info": {
		"_postman_id": "a7b3e3d0-d5ca-46ac-b0c5-e8b49c60f278",
		"name": "Team03-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e01d26-338f-43a0-9c2f-db7e48529da5",
								"exec": [
									"// Parse the response body to JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Set the token as a collection variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseBody.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20dbbcc1-5438-4726-b580-fc11c0703873",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56628f18-f1e0-45dd-9e94-38b11028e6ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"sdet@gmail.com\",\r\n  \"password\": \"LmsHackathon@2024\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}login"
					},
					"response": []
				}
			],
			"id": "2f24a59f-a25a-4f93-970a-7f46f3eb89b8",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5bcd333-07ae-4a44-91e7-51295397d31c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95bd3ee8-18b7-4542-b24d-9138b3013724",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program-sudha",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5aae428f-f7c6-4f43-bfea-b83193cf6d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"A QA team specializing in API testing.\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "884eef17-3d76-4ee9-a401-6ff843e4e438",
								"exec": [
									"// Function to generate a random 2-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let programName2 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName2\", programName2);\r",
									"\r",
									"console.log(\"Generated Program Name 2: \" + programName2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdf72ea8-4ce4-4a56-bae6-2c98256fc252",
								"exec": [
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId2\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", responseBody.programName);\r",
									"    console.log(\"Program ID2: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId2 from the response.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f9082391-0355-4e88-9221-8b7f0b89b1d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programDescription\": \"A team focused on automating the testing of APIs for performance and reliability.\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Program",
					"id": "c7c6e893-87c6-48c2-a4ca-e088219bd6f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allPrograms"
					},
					"response": []
				},
				{
					"name": "GET All Programs With Users",
					"id": "8339c37b-0e23-4bec-8f00-eea7f83053a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "GET Program By ProgramId",
					"id": "554c59d0-ef09-43cb-ab6c-f3eef931ff82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b4e7fd1e-376b-4c0d-b40e-7a71682acf49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing-Updated description using programName1\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f3904322-db09-4dd5-a0a4-af096cd0e4f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing.-Updated by programId1\",\r\n  \"programId\": {{programId1}},\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId",
					"id": "91b03a05-11f9-4a95-b929-7cc8d5e2effe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName",
					"id": "497d48fe-ec2e-4e50-9d35-df335409cf11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				}
			],
			"id": "50e5aa73-ec90-45aa-b65e-c1f24e764694"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Beginner\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; // Default to \"Beginner\" if type not found\r",
									"// const selectedBatchClassCount = Number(batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"]); // Default to \"Beginner\" if type not found\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: \"Active\",\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"// Get the batchId from the response body\r",
									"const batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9420f6dc-9243-453f-9984-258415c5f01e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",  // No quotes around integer\r\n    \"batchStatus\": \"Active\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "004084cc-004e-4fc1-b382-8fbc528ced11",
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName2 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName2\", batchName2);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName2);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Beginner\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; // Default to \"Beginner\" if type not found\r",
									"// const selectedBatchClassCount = Number(batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"]); // Default to \"Beginner\" if type not found\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName2,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: \"Active\",\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e181056-b122-4292-b654-2e891600392b",
								"exec": [
									"// Get the batchId from the response body\r",
									"const batchId2 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId2\", batchId2);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId2);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b546865d-4b58-4620-8504-03e04438bdeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",  // No quotes around integer\r\n    \"batchStatus\": \"Active\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET All Batches",
					"id": "9ae47849-dfdc-4976-b9cb-a76d9ff82ebf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchId",
					"id": "9ec9f80c-0c33-4540-9cc3-4c61a9fe4ef7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchName",
					"id": "0572519b-ff10-4c33-99f8-d34d8ce23375",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By ProgramId",
					"id": "11e09bb7-27d2-47c6-bf20-2d283f14980c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5db35245-07ef-43bb-bb1b-9812d6ff3da7",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; // Default to \"Beginner\" if type not found\r",
									"// const selectedBatchClassCount = Number(batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"]); // Default to \"Beginner\" if type not found\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: \"Active\",\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0473535b-7863-475f-8633-22901eb8ea68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{              \r\n    \"batchDescription\": \"{{batchDescription}}\", \r\n    \"batchName\": \"{{batchName1}}\",           \r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",  \r\n    \"batchStatus\": \"Active\",                 \r\n    \"programId\": \"{{programId}}\",            \r\n    \"programName\": \"{{programName}}\"         \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"id": "20befc6a-1773-40a9-ac94-5fb26dc548b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				}
			],
			"id": "ac9d7b66-d62c-4772-a62f-497227fb7256"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000);\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									"const response = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"const classId = response.csId;\r",
									"const staffId = response.classStaffId;  \r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "83b4695e-eb34-46e8-9324-05cb4a4b98e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"API BOOTCAMP\",\r\n  \"classDate\": \"2024-11-25\",\r\n  \"classDescription\": \"Every month going on\",\r\n  \"classNo\": 5,\r\n  \"classNotes\": \"Gherkins\",\r\n  \"classRecordingPath\": \"recordings\",\r\n  \"classStaffId\": \"U53\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"Active\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": [\r\n    \"2024-12-15T15:11:08.750Z\",\r\n    \"2025-01-15T15:11:08.750Z\",\r\n    \"2025-02-15T15:11:08.750Z\",\r\n    \"2025-03-15T15:11:08.750Z\",\r\n    \"2025-04-15T15:11:08.750Z\"\r\n  ]\r\n  }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"id": "738b238e-fd61-46ab-b7e6-51da283f7f58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allClasses"
					},
					"response": []
				},
				{
					"name": "Get All Class List Copy",
					"id": "cab75cd1-91dc-4ccc-89d7-be7c5c6f5841",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/allClasses"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By BatchId",
					"id": "792c9c6d-6a81-4009-b859-1f1de708fea8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Get Class Details By Class Id",
					"id": "aa31aed2-d987-4a7b-8037-7096088dd968",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Class Topic",
					"id": "a172bb1e-dced-4d19-896a-50b17047a83e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"id": "112f60ef-260d-4e10-b7b9-5a4d9c3257a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId1}}"
					},
					"response": []
				}
			],
			"id": "a5d70a42-b053-4510-a1f9-2c04eb14ff24"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "df780670-4c95-435c-8bba-64d387768e74"
		},
		{
			"name": "User Role Map",
			"item": [],
			"id": "72aec55b-921c-49c1-a09e-e97657823427"
		},
		{
			"name": "Chaining-PositiveScenarios",
			"item": [],
			"id": "f52e8471-4ccb-4664-b502-a663870764aa"
		},
		{
			"name": "Chaining-NegativeScenarios-sudha",
			"item": [
				{
					"name": "Neg-Create Duplicate Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response indicates an error (success is false)\r",
									"if (responseBody.success === false) {\r",
									"    // Print the error message from the response\r",
									"    console.error(\"Error: \" + responseBody.message);\r",
									"} else if (responseBody && responseBody.programId) {\r",
									"    // If the response contains programId and programName, print them\r",
									"    console.log(\"Program ID: \" + responseBody.programId);\r",
									"    console.log(\"Program Name: \" + responseBody.programName);\r",
									"} else {\r",
									"    // If neither condition is met, log a failure\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "54f08d5f-7917-407f-a621-005e7c873fb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"A QA team specializing in API testing.\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-Create Program with Null Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b3e6db-0832-4184-b1be-fb1a3bfaf95b",
								"exec": [
									"/*let responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response indicates an error (success is false)\r",
									"if (responseBody.success === false) {\r",
									"    // Print the error message from the response\r",
									"    console.error(\"Error: \" + responseBody.message);\r",
									"} else if (responseBody && responseBody.programId) {\r",
									"    // If the response contains programId and programName, print them\r",
									"    console.log(\"Program ID: \" + responseBody.programId);\r",
									"    console.log(\"Program Name: \" + responseBody.programName);\r",
									"} else {\r",
									"    // If neither condition is met, log a failure\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc70d1c4-b2ad-4097-9eab-4f60b41baecb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c281c49a-76c6-4540-9ec7-a8619a516b88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A description of the program\",\r\n  \"programName\": \"New Program\",\r\n  \"programStatus\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-Get Program with Incorrect Program ID",
					"id": "6ba19cfc-80cc-4e7c-8def-c118db3ac205",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program with Invalid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7090bef5-7fac-40b3-8c92-63d795fe12f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing-Updated description\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{invalidProgramName}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49c3da04-e2c8-4baf-bc51-d309f5666103",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing-Updated description\",\r\n  \"programName\": \"{{updatedProgramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program by Invalid ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6c943492-241a-48ca-bae4-47ce054c8ef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing.-Updated by Invalid ProgramId\",\r\n  \"programId\": {{invalidProgramId}},\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1971ae8-1918-455d-bf6c-e0368527020e",
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"let updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a7fd0c9-2b0b-425b-9d37-803500d4ec59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"A QA team specializing in API testing.-Updated by Invalid ProgramId\",\r\n  \"programId\": {{invalidProgramId}},\r\n  \"programName\": \"{{programName1}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-CreateBatch-BadRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df0389b8-5a1c-4b3d-bbbe-52c857c347b1",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Specialized\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; // Default to \"Beginner\" if type not found\r",
									"const selectedBatchClassCount = Number(batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"]); // Default to \"Beginner\" if type not found\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, // Now an integer\r",
									"    batchStatus: \"Active\",\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "48f19c1a-f541-4115-9c35-a7c37ac7d680",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch by Invalid BatchId",
					"id": "3ba8b48e-9abf-4111-9177-b05967897199",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId3}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidBatchName",
					"id": "887f7573-bb70-4267-9de2-bc8697051dd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidProgramId",
					"id": "c0c28988-035b-4d37-bf6a-f4122e7bfb85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId3}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update By Bad Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5db35245-07ef-43bb-bb1b-9812d6ff3da7",
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Advanced\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; // Default to \"Beginner\" if type not found\r",
									"// const selectedBatchClassCount = Number(batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"]); // Default to \"Beginner\" if type not found\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: \"Active\",\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ad8e4606-3dd9-4352-9716-4373b5cbe43a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n        \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Duplicate Class Topic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "211c10ac-6027-4849-b6ee-4204950e739f",
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"var classTopic=pm.collectionVariables.get(classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Class Topic \", classTopic);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53f5c8d4-98cd-4e94-83f2-ea43638408af",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e0c6fbd2-a1b8-46b2-9a93-01b84635ff9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"API BOOTCAMP\",\r\n  \"classDate\": \"2024-11-25\",\r\n  \"classDescription\": \"Every month going on\",\r\n  \"classNo\": 5,\r\n  \"classNotes\": \"Gherkins\",\r\n  \"classRecordingPath\": \"recordings\",\r\n  \"classStaffId\": \"U53\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"Active\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": [\r\n    \"2024-12-15T15:11:08.750Z\",\r\n    \"2025-01-15T15:11:08.750Z\",\r\n    \"2025-02-15T15:11:08.750Z\",\r\n    \"2025-03-15T15:11:08.750Z\",\r\n    \"2025-04-15T15:11:08.750Z\"\r\n  ]\r\n  }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid BatchId",
					"id": "fac5cbf9-d108-44ad-bbb5-3e50bb8a193b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Details By Invalid Class Id",
					"id": "82740fc7-8b4d-4d4a-9367-488732e0d626",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{csid}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Invalid Class Topic",
					"id": "2158a825-64eb-4689-b442-6d6d7bdbf2fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id Copy",
					"id": "419e8955-8918-4ed4-8d6d-606cb34f954d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Batch with Non-Existing BatchId",
					"id": "30378a49-05d6-471a-bd14-62253d30c6db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramName",
					"id": "7c3b9647-a9b2-4b0d-99e1-adc226de4132",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramID",
					"id": "a0f7cd17-e7bc-4172-91d4-1b246160d1b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				}
			],
			"id": "2bb4b8bf-ca08-4c8a-8830-ae9b9503323b"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42750de8-2148-4aea-90db-3bed3f6dd7dd",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "513ce959-e404-474e-a3ed-ba3734282693",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var commonTests =()=> {\r",
					"//test header presence\r",
					"     pm.test(\"Content-Type header is present\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\");\r",
					"    });\r",
					"//test header content\r",
					"  pm.test(\"Content-Type header is application/json\", function () {\r",
					"        (pm.response.headers.get(\"Content-Type\")).to.include('application/json');\r",
					"    });\r",
					"    // test response time\r",
					"    pm.test(\"Response time is less than 1000ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"    });\r",
					"\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "programName1",
			"value": ""
		},
		{
			"key": "programName2",
			"value": ""
		},
		{
			"key": "programId1",
			"value": ""
		},
		{
			"key": "programId2",
			"value": ""
		},
		{
			"key": "invalidProgramId",
			"value": "",
			"type": "string"
		},
		{
			"key": "updatedProgramName",
			"value": ""
		},
		{
			"key": "invalidProgramName",
			"value": "APINinjas",
			"type": "string"
		},
		{
			"key": "batchName1",
			"value": ""
		},
		{
			"key": "batchName2",
			"value": ""
		},
		{
			"key": "batchId2",
			"value": ""
		},
		{
			"key": "batchId1",
			"value": ""
		},
		{
			"key": "classTopic",
			"value": ""
		},
		{
			"key": "classId",
			"value": ""
		},
		{
			"key": "staffId",
			"value": ""
		}
	]
}