{
	"info": {
		"_postman_id": "b95c88b2-8bc5-44ac-bca0-8fa5207d23bb",
		"name": "Team03-API-Ninjas-LMSAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body to JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Set the token as a collection variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseBody.token);\r",
									"pm.collectionVariables.set(\"adminID\", responseBody.userId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"email\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"passwordExpired\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"token\", \"type\", \"userId\", \"email\", \"roles\", \"status\", \"passwordExpired\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "cbacac9c-2fa9-4f38-baee-3d270c22e5ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Access data from CSV file\r",
									"var userLoginEmailId = pm.iterationData.get(\"userLoginEmailId\");\r",
									"var password = pm.iterationData.get(\"password\");\r",
									"\r",
									"pm.variables.set(\"userLoginEmailId\", userLoginEmailId);\r",
									"pm.variables.set(\"password\", password);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "66aa0398-094f-45c0-ba28-faee4033a4df"
							}
						}
					],
					"id": "ee5ddb78-6cfe-4387-b25d-f4465742ef57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}login"
					},
					"response": []
				}
			],
			"id": "9e61b06e-6b62-4f13-9c11-1e96646f34dc",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						],
						"id": "82c4dfa6-01bc-4162-b34f-60e362a06b51"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						],
						"id": "f6e95374-39b0-419e-bae1-309ba1e6190a"
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Program Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e313aa61-f100-4fbe-9e9a-fede6e796652"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"//Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "47958f66-9aff-4a3c-8763-133fab1564a1"
							}
						}
					],
					"id": "5c368512-e130-4a03-8f99-7bb6e9d31413",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 2-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName2 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName2\", programName2);\r",
									"\r",
									"console.log(\"Generated Program Name 2: \" + programName2);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription2 = pm.iterationData.get(\"programDescription2\");\r",
									"var programStatus2 = pm.iterationData.get(\"programStatus2\");\r",
									"\r",
									"pm.variables.set(\"programDescription2\", programDescription2);\r",
									"pm.variables.set(\"programStatus2\", programStatus2);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "38d851c3-d6a9-4a87-8b1c-296203f3f0df"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId2\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", responseBody.programName);\r",
									"    console.log(\"Program ID2: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId2 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "10df74ee-ecfa-4244-8f0d-c2f5b4a76a5b"
							}
						}
					],
					"id": "12b5cb69-88fb-4ff6-9b8f-36eb445e1a15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "69ab8b9f-2ded-4eea-a1dc-aa9c1a8b6caf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "c86b6765-30c1-4233-b1e2-e42c76248338"
							}
						}
					],
					"id": "cb9d86f5-6611-41f0-9be7-9ac243ec9100",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allPrograms"
					},
					"response": []
				},
				{
					"name": "GET All Programs With Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "47618aa3-e05d-4d93-9498-bac4140a8710"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "b2706209-c121-4da7-bb02-f36a240308af"
							}
						}
					],
					"id": "74478698-fcf9-417a-9235-04f89927976e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "GET Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6955ac6b-096e-4f71-a554-0ca82037b5f9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "deb468f1-0343-4a88-a812-af917e1fdc7b"
							}
						}
					],
					"id": "6653e977-ffa4-49a3-86f2-be6966cebca3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription=pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ae79d622-a218-45ea-ac0a-2e9cc73efe05"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Put Update Program \");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5c1bd2aa-d4f2-402b-800e-42355f38b469"
							}
						}
					],
					"id": "954f4827-4015-43b3-9617-4b3b406201f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"\r",
									"// var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\") || \"A QA team specializing in API testing.-local variable\";\r",
									"// var programStatus = pm.iterationData.get(\"programStatus\") || \"Active\";\r",
									"// var creationTime = pm.iterationData.get(\"creationTime\") || \"2023-10-01T10:00:00Z\";\r",
									"// var lastModTime = pm.iterationData.get(\"lastModTime\") || \"2023-10-02T11:00:00Z\";\r",
									"\r",
									"var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\"); \r",
									"var creationTime = pm.iterationData.get(\"creationTime\");\r",
									"var lastModTime = pm.iterationData.get(\"lastModTime\"); \r",
									"\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"pm.variables.set(\"creationTime\", creationTime);\r",
									"pm.variables.set(\"lastModTime\", lastModTime);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "124e02d9-488e-471c-8399-054154fda701"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b5a3a51d-e3cf-4376-b487-37d79c73c40c"
							}
						}
					],
					"id": "166dc526-b5ab-44e8-a6e3-9ff2f00901f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\",\r\n  \"creationTime\": \"{{creationTime}}\",\r\n  \"lastModTime\": \"{{lastModTime}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By First ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2fb87d6a-9c57-42a2-96a3-02dad092b20f"
							}
						}
					],
					"id": "05b3085f-c0d8-4882-8770-6c4da7cf5cc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By Second ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"// Retrieve the function from collection variables\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    // Check if status code is 200\r",
									"testHeader(\"Content-Type\"); // Check if the Content-Type header is present\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6a3e2d97-8753-4767-bf6e-6a3801eb8190"
							}
						}
					],
					"id": "fff57cbf-427a-4c24-85c8-236c5919e47f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				}
			],
			"id": "1fe479e6-cec5-46fc-95a7-1aab34d14d0a"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f611e180-4d18-4e78-947f-ae529f82be0c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fceb9c2b-888c-48b5-a558-36ef29146151"
							}
						}
					],
					"id": "7ce2022f-171f-4628-849d-83cadedb2e5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c8065a56-7cb3-4303-801d-217bc52b41f7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Batch Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "de46cd5a-d956-407b-86df-b4ca5b9852cb"
							}
						}
					],
					"id": "68a0cdeb-6041-4f03-b1e4-e8b97cae6ea2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0d99e9b8-472c-4466-8b58-9af3888c17d5"
							}
						}
					],
					"id": "ed371aa3-392e-4d30-9bd2-9564efb9806d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a9174ad3-cad8-4880-9f3c-1b7716ed59f0"
							}
						}
					],
					"id": "498119f6-3616-4c16-ba15-9113e67c788e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4902115e-5af2-4064-a7f4-0b19c8d6d7c9"
							}
						}
					],
					"id": "df1b37ac-6bb7-407a-8609-2f5b0dbb6929",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "68c60b0a-fdd8-4d1d-ab06-276d0b7c2945"
							}
						}
					],
					"id": "78d2216b-0cf0-4ef8-b717-9190eebe4fdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Advanced\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "82f3dd96-75c0-4032-bbee-05e0a26faafe"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"PUT Update Batch\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5c550fc0-c1c2-46b4-8739-cfdd7acf08ee"
							}
						}
					],
					"id": "f54bcb3e-67d0-4e89-b747-126d0b7cef15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "38402167-7f38-4b05-a100-07db96de9505"
							}
						}
					],
					"id": "6801fa3b-a5dd-4be8-b98d-89d3098a5a0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				}
			],
			"id": "83996885-9d6e-481b-8eaf-42fd8f677063"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e7f8d3c9-f707-4c59-be9c-b9888cf2f4be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ac449369-f26a-413a-8fa3-8a2abaa9e481"
							}
						}
					],
					"id": "2a379230-ba4b-4cf4-9dd4-40e35defe843",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"//var batchStatus = pm.iterationData.get(\"batchStatus\") || \"Active\";\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ea1193e1-9286-4549-8b7c-95b061cab606"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "b328f96e-e9c6-4c99-9f05-7887890fb1f0"
							}
						}
					],
					"id": "b74ea347-6a2b-4cf8-bb47-c057bffe6696",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5e1efd7c-f682-4e03-89ea-cb7da0ed4343"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = responseBody.csId;\r",
									"var staffId = responseBody.classStaffId;  \r",
									"var classrecordings=responseBody.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "27678174-1e66-446b-9deb-05450cfe2dc4"
							}
						}
					],
					"id": "dba71535-6d32-4b2e-a9db-d17709056010",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "547856cb-49e9-419a-b2f7-feb925d3cc0a"
							}
						}
					],
					"id": "becfd3b4-5548-44fc-8cdc-8b5d04496b6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allClasses"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "67d65cb9-283e-4911-8364-e887597729b8"
							}
						}
					],
					"id": "14fd1fd8-7eaf-4dd3-b018-e7c99249daca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Get Class Details By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6619f07b-5ce2-411f-83a2-c037d28084ac"
							}
						}
					],
					"id": "d443920f-9cb2-497e-99ac-09f9f7772156",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8cee40f0-65c9-46b3-939e-a69da00e651d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "d9f97757-3f9e-4348-91e2-696eebeb6775"
							}
						}
					],
					"id": "691f2530-a57c-4a7c-934c-9bb29d5fe354",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "29dc7076-a760-4d2a-8aa2-4653889df056"
							}
						}
					],
					"id": "57fb64be-a5c5-4d35-9c79-720ce880e1ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1ae2fe57-5259-42eb-8cf5-c10ea16433e8"
							}
						}
					],
					"id": "00cb1967-d8d8-4e5f-b9b4-34a755391215",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{staffId}}"
					},
					"response": []
				},
				{
					"name": "Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ca48909d-e32f-415f-9ed3-2ded30c55e85"
							}
						}
					],
					"id": "d49d76ad-83bf-4daf-a77a-86719210d75b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classrecordings"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c374aeae-d612-4491-ade4-8d8447b1ad3f"
							}
						}
					],
					"id": "ec240c3d-6a78-48e5-9ffb-a47b55833815",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classRecordings/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Upcoming Classes For Particular Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "be456c2b-dbbd-4061-ac54-ba12b7b28b4e"
							}
						}
					],
					"id": "bb19d87c-bd67-43ae-90e6-c42962815280",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{sampleStudentId}}"
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7eec93a4-d0c9-402a-8d48-8531c43567f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"var classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var updatedClassComments = pm.iterationData.get(\"updatedClassComments\");\r",
									"var updatedClassDate = pm.iterationData.get(\"updatedClassDate\");\r",
									"var updatedClassDescription = pm.iterationData.get(\"updatedClassDescription\");\r",
									"var updatedClassNotes = pm.iterationData.get(\"updatedClassNotes\");\r",
									"var updatedClassRecordingPath = pm.iterationData.get(\"updatedClassRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"\r",
									"var updatedClassScheduledDates = pm.iterationData.get(\"updatedClassScheduledDates\");\r",
									"\r",
									"var updatedDateArray = updatedClassScheduledDates.split(',');\r",
									"\r",
									"var formattedUpdatedDates = updatedDateArray.map(dateStr => {\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        return null;\r",
									"    }\r",
									"    return dateObj.toISOString();\r",
									"});\r",
									"\r",
									"var formattedUpdatedClassScheduledDates = formattedUpdatedDates.filter(date => date !== null);\r",
									"\r",
									"console.log(\"Formatted updated classScheduledDates:\", formattedUpdatedClassScheduledDates);\r",
									"\r",
									"pm.variables.set(\"updatedClassScheduledDates\", JSON.stringify(formattedUpdatedClassScheduledDates));\r",
									"\r",
									"var updatedClassNo = formattedUpdatedClassScheduledDates.length;\r",
									"\r",
									"pm.variables.set(\"updatedClassComments\", updatedClassComments);\r",
									"pm.variables.set(\"updatedClassDate\", updatedClassDate);\r",
									"pm.variables.set(\"updatedClassDescription\", updatedClassDescription);\r",
									"pm.variables.set(\"updatedClassNo\", updatedClassNo);\r",
									"pm.variables.set(\"updatedClassNotes\", updatedClassNotes);\r",
									"pm.variables.set(\"updatedClassRecordingPath\", updatedClassRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1eef0284-6d24-4a44-843d-fdac3001bc9f"
							}
						}
					],
					"id": "14bcc024-1371-416e-a394-873302ff2dc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{updatedClassComments}}\",\r\n  \"classDate\": \"{{updatedClassDate}}\",\r\n  \"classDescription\": \"{{updatedClassDescription}}\",\r\n  \"classNo\": {{updatedClassNo}},\r\n  \"classNotes\": \"{{updatedClassNotes}}\",\r\n  \"classRecordingPath\": \"{{updatedClassRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{updatedClassScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Update Class Recording Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4e41eb0b-ea9d-4bb9-8eaa-408e6a1fbc70"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7aa7ad6d-65e2-4605-9af3-967ff9ea3741"
							}
						}
					],
					"id": "1b23b147-231f-4fce-b01f-48ea32ac6af8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"csId\": {{classId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClassrecording/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "65b1efc0-5e0a-4dd6-b134-ee0a3f78ace2"
							}
						}
					],
					"id": "e0fb9976-b514-45d7-9a6a-d036da181d11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By First BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bf61dc20-45c5-4a32-9160-1ca339fac642"
							}
						}
					],
					"id": "d982ef79-135a-4577-95ad-2c97640f9cd0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By First ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e88c3959-9241-4af5-bb29-407622536a15"
							}
						}
					],
					"id": "cc87dd3c-cbb6-4490-9376-c56c4aef6462",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				}
			],
			"id": "41c5cc26-7026-4c6e-bce3-e48bce900f82"
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es)  Of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f4b7d366-a7e0-44c7-b94e-6852b458a3f5"
							}
						}
					],
					"id": "85b2a996-e60c-48e1-b042-8d198486caf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1d4a5af4-c373-4788-84fe-7b215599952e"
							}
						}
					],
					"id": "8b0e1fd6-8b0d-4bc7-838b-99484d650c49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/U57"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "45ce4588-209c-4857-b620-d2c72792cd9c"
							}
						}
					],
					"id": "9905cecc-e249-4f79-9024-2f6f17a4af00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleUserId}}"
					},
					"response": []
				}
			],
			"id": "b536a34b-2579-4cfd-b354-0421e664de1c"
		},
		{
			"name": "Chaining-End-To-End",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body to JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Set the token as a collection variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseBody.token);\r",
									"pm.collectionVariables.set(\"adminID\", responseBody.userId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"email\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"passwordExpired\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"token\", \"type\", \"userId\", \"email\", \"roles\", \"status\", \"passwordExpired\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "282352f9-6d1c-451d-8d97-609c9546a6ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Access data from CSV file\r",
									"var userLoginEmailId = pm.iterationData.get(\"userLoginEmailId\");\r",
									"var password = pm.iterationData.get(\"password\");\r",
									"\r",
									"pm.variables.set(\"userLoginEmailId\", userLoginEmailId);\r",
									"pm.variables.set(\"password\", password);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6f2c176a-faf1-4311-bb50-5493f6a36df8"
							}
						}
					],
					"id": "ee5a2cdf-8c67-4ffd-b7e4-797aedc00a0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}login"
					},
					"response": []
				},
				{
					"name": "Add New Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Program Creation\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "be5fb242-1b30-44d5-bfe7-98f52d0bdf68"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8a01c3b5-43b7-47ad-b640-c95a5b8a7846"
							}
						}
					],
					"id": "3151ce78-8af4-493b-9f48-c20c88b7160e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Add New Program2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 2-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName2 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName2\", programName2);\r",
									"\r",
									"console.log(\"Generated Program Name 2: \" + programName2);\r",
									"\r",
									"// Access data from CSV file\r",
									"var programDescription2 = pm.iterationData.get(\"programDescription2\");\r",
									"var programStatus2 = pm.iterationData.get(\"programStatus2\");\r",
									"\r",
									"pm.variables.set(\"programDescription2\", programDescription2);\r",
									"pm.variables.set(\"programStatus2\", programStatus2);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0d3e9e06-2b01-411f-97af-ccb9939f83b3"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId2\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", responseBody.programName);\r",
									"    console.log(\"Program ID2: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId2 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "568338a3-c739-4f17-a209-18b9552e69e8"
							}
						}
					],
					"id": "f12e1c81-459b-4b57-9b77-eacf239490d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a49bb11e-c057-4f8a-8cec-2a0c64994d5c"
							}
						}
					],
					"id": "cba42857-8c58-4f9d-b380-b9ba2197c9a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allPrograms"
					},
					"response": []
				},
				{
					"name": "GET All Programs With Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "61a81452-8ced-4fd0-906e-6d606e85305c"
							}
						}
					],
					"id": "34c89e70-7509-4f5b-b517-8781abcbde2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "GET Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e9a7030a-3292-4efa-9155-addf2683a264"
							}
						}
					],
					"id": "56d641c2-1c0a-43b1-8f4e-82f9303d9fe4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription=pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d1255c79-f5a0-49c3-9464-4ff5add12121"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2e7d1148-5308-45f0-bb4c-91ae567ae678"
							}
						}
					],
					"id": "130e9784-15b8-4a8e-b7ff-4201399d9641",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (let i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var updatedProgramName = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"updatedProgramName\", updatedProgramName);\r",
									"\r",
									"console.log(\"ProgramName1 before updation :\"+pm.collectionVariables.get(\"programName1\"));\r",
									"console.log(\"Updated ProgramName: \" + updatedProgramName);\r",
									"\r",
									"var updatedProgramDescription = pm.iterationData.get(\"updatedProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\"); \r",
									"var creationTime = pm.iterationData.get(\"creationTime\");\r",
									"var lastModTime = pm.iterationData.get(\"lastModTime\"); \r",
									"\r",
									"\r",
									"pm.variables.set(\"updatedProgramDescription\", updatedProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"pm.variables.set(\"creationTime\", creationTime);\r",
									"pm.variables.set(\"lastModTime\", lastModTime);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "29da1187-13f7-44e6-9c20-d797165732a5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "157b567b-1023-42cc-9595-900b41518dcf"
							}
						}
					],
					"id": "61538804-286f-4898-a5a0-7d406c569724",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{updatedProgramName}}\",\r\n  \"programDescription\": \"{{updatedProgramDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\",\r\n  \"creationTime\": \"{{creationTime}}\",\r\n  \"lastModTime\": \"{{lastModTime}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}putprogram/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e7005d57-b7ba-446a-af96-d7bf6758c769"
							}
						}
					],
					"id": "173fd391-ae07-47c0-b1ea-5ef4932f18e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"// Retrieve the function from collection variables\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    // Check if status code is 200\r",
									"testHeader(\"Content-Type\"); // Check if the Content-Type header is present\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "169927a2-efc1-4414-8ef7-b7e8a3e7e9b3"
							}
						}
					],
					"id": "6e982767-da5c-4b05-a4ea-047b30eaeaf8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Create New Batch1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "643e03a4-f1c7-4e5b-b82e-784f09310b7e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchId\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\", \"programName\"],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"Post Batch Creation\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "da64527f-e730-49ab-81ba-f8958fab5f94"
							}
						}
					],
					"id": "d6fdedc0-e2da-499e-9790-c3aee617352d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create New Batch2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName2 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName2\", batchName2);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName2);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Beginner\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"];\r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName2,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "48aad806-daef-45ae-8d44-56ed3678e2a4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the batchId from the response body\r",
									"const batchId2 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId2\", batchId2);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId2);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "05f34d68-d981-4de5-a178-4138d7802042"
							}
						}
					],
					"id": "f23ac175-787a-4cac-b202-9417ca9e403b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8eb3e9b5-ed7b-4d54-b3c0-e61514587550"
							}
						}
					],
					"id": "2870c9f3-0991-46bc-8e9e-76c0e0d4dbf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0f6b104c-f225-4e3d-a726-3749664838ab"
							}
						}
					],
					"id": "6ce4d624-20d1-4153-81c1-024d68681a60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "664fd142-0e4d-4b72-a2f0-646eb42dbcd1"
							}
						}
					],
					"id": "d6ed5176-67a2-41ef-84b4-a14ec812aec4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{batchName1}}"
					},
					"response": []
				},
				{
					"name": "GET Batch By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bf48f994-b406-4598-be10-7c5fe8058137"
							}
						}
					],
					"id": "5fd486a7-1a40-4019-b947-aa7105d82e08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{programId2}}"
					},
					"response": []
				},
				{
					"name": "Update By BatchId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName2 = pm.collectionVariables.get(\"programName2\");\r",
									"var programId2 = pm.collectionVariables.get(\"programId2\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName2 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Advanced\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"const batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId2,\r",
									"    programName: programName2\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6e23c49d-dfd7-4c57-bf8f-788dc5c540f9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c23b528a-94fb-45f3-971b-01c7453e1659"
							}
						}
					],
					"id": "425d07fc-5780-496c-9358-f69613de970e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8b4761c1-7fa4-45c0-968c-bd58b41c85f7"
							}
						}
					],
					"id": "d0ccdd38-8a7e-4748-8527-5ebbbc6dc3b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "aa5a1934-b35a-4736-ae84-254b9afe283b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = responseBody.csId;\r",
									"var staffId = responseBody.classStaffId;  \r",
									"var classrecordings=responseBody.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									"var Ajv = require('ajv');\r",
									"var ajv = new Ajv();\r",
									"\r",
									"var validateSchemaString = pm.collectionVariables.get(\"validateSchema\");\r",
									"var validateSchema = eval(`(${validateSchemaString})`);\r",
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\",\r",
									"        \"format\": \"date-time\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ],\r",
									"  \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"console.log(\"Response Body:\", responseBody);\r",
									"console.log(\"Schema:\", schema);\r",
									"\r",
									"validateSchema(responseBody, schema,\"POST Class Creation\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8ba66647-4b28-414d-a90f-5f592f3e7364"
							}
						}
					],
					"id": "54b64b94-7d33-4ad1-bb52-c2935a41f391",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId2}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName2}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Get All Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f98dc6ae-8908-4ec8-a0cc-0b9a007a8ce6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "aa300e43-5ddd-48b6-aecf-96332ccc8bc4"
							}
						}
					],
					"id": "a583c8fd-aaee-43eb-a0b6-6120f1856b25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}allClasses"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bfbe5293-a229-4ba2-9329-db5afde86494"
							}
						}
					],
					"id": "1c1b67ef-4c32-417b-813b-9f23539c4ab5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Get Class Details By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0350e5aa-d319-472b-bb3d-75cb0c0f5a7b"
							}
						}
					],
					"id": "129027f5-f851-44ab-a002-66e11d69c7c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d090150a-d388-4185-90c1-08705535f9f5"
							}
						}
					],
					"id": "021283af-151f-408a-b530-b33ab4d72641",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{classTopic}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f9a9398a-fe9d-482d-b710-06a3b5dd540d"
							}
						}
					],
					"id": "1aa45787-3e7a-45c6-b9fe-0284749c9bf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Get All Classes By StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5c392424-0b7a-4107-987d-e5d9274db442"
							}
						}
					],
					"id": "67d588b1-eb49-4660-82e0-91102b567bba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{staffId}}"
					},
					"response": []
				},
				{
					"name": "Get All Recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dedbda18-9958-41e5-acdc-f595c758cbc4"
							}
						}
					],
					"id": "85ed00b8-6ee5-41d3-88be-04d47f98814e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classrecordings"
					},
					"response": []
				},
				{
					"name": "Get Class Recordings By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "68d352cd-6889-46f9-8a32-6fc1cae85e04"
							}
						}
					],
					"id": "59834063-f96a-4171-bef3-fe10b1621724",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}download/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get All Upcoming Classes For Particular Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bd141bcf-faa2-47af-918a-cca9986bbff8"
							}
						}
					],
					"id": "4480d346-7577-4123-87bb-bb1a55347f45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{sampleStudentId}}"
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1bc729e2-c135-4439-9616-d99fd66d19cb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"var classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var updatedClassComments = pm.iterationData.get(\"updatedClassComments\");\r",
									"var updatedClassDate = pm.iterationData.get(\"updatedClassDate\");\r",
									"var updatedClassDescription = pm.iterationData.get(\"updatedClassDescription\");\r",
									"var updatedClassNotes = pm.iterationData.get(\"updatedClassNotes\");\r",
									"var updatedClassRecordingPath = pm.iterationData.get(\"updatedClassRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"\r",
									"var updatedClassScheduledDates = pm.iterationData.get(\"updatedClassScheduledDates\");\r",
									"\r",
									"var updatedDateArray = updatedClassScheduledDates.split(',');\r",
									"\r",
									"var formattedUpdatedDates = updatedDateArray.map(dateStr => {\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        return null;\r",
									"    }\r",
									"    return dateObj.toISOString();\r",
									"});\r",
									"\r",
									"var formattedUpdatedClassScheduledDates = formattedUpdatedDates.filter(date => date !== null);\r",
									"\r",
									"console.log(\"Formatted updated classScheduledDates:\", formattedUpdatedClassScheduledDates);\r",
									"\r",
									"pm.variables.set(\"updatedClassScheduledDates\", JSON.stringify(formattedUpdatedClassScheduledDates));\r",
									"\r",
									"var updatedClassNo = formattedUpdatedClassScheduledDates.length;\r",
									"\r",
									"pm.variables.set(\"updatedClassComments\", updatedClassComments);\r",
									"pm.variables.set(\"updatedClassDate\", updatedClassDate);\r",
									"pm.variables.set(\"updatedClassDescription\", updatedClassDescription);\r",
									"pm.variables.set(\"updatedClassNo\", updatedClassNo);\r",
									"pm.variables.set(\"updatedClassNotes\", updatedClassNotes);\r",
									"pm.variables.set(\"updatedClassRecordingPath\", updatedClassRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "672f5e99-90ea-4e2e-a061-1cfb740c43bd"
							}
						}
					],
					"id": "0314e497-22e6-494a-98ee-15669f89728b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId2}},\r\n  \"classComments\": \"{{updatedClassComments}}\",\r\n  \"classDate\": \"{{updatedClassDate}}\",\r\n  \"classDescription\": \"{{updatedClassDescription}}\",\r\n  \"classNo\": {{updatedClassNo}},\r\n  \"classNotes\": \"{{updatedClassNotes}}\",\r\n  \"classRecordingPath\": \"{{updatedClassRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName2}}\",\r\n  \"classScheduledDates\": {{updatedClassScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Update Class Recording Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9dd019d9-67ad-40e3-834a-2c507ce85d63"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5b3fdc92-9008-4bfd-8358-860bff519c22"
							}
						}
					],
					"id": "fb5d7a2f-8adb-41e9-bb4f-b26a751bc4ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"csId\": {{classId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}updateClassrecording/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "963f66dd-2c1f-47c5-ac6b-b32b10eba97c"
							}
						}
					],
					"id": "0bd11c28-08dc-48cd-84ef-760be7b14551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch(es)  Of All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bfce9ab1-3175-411b-aa22-eb241ea060bb"
							}
						}
					],
					"id": "d55e8762-0363-4dc2-93e7-c055fba050ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6dc20d3c-6b46-4950-af19-aa6b0341d574"
							}
						}
					],
					"id": "90d3c5e7-d5e7-4346-a954-6fbf0d6bae44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/{{userIdForProgramBatchMap}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By Second BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d1081ac8-80d7-46a2-8c6f-05e50a17e5fa"
							}
						}
					],
					"id": "60d7f753-69a4-4244-a26f-af74350b30f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId2}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "66b728b3-dcea-4eb7-b256-ddecd6f28084"
							}
						}
					],
					"id": "da82a9dd-7a47-41be-a181-c522fd858030",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleUserId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By Second ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "441a13ee-a3e1-4b8d-934e-e60bde411de4"
							}
						}
					],
					"id": "0b459a26-02fd-4ee2-b159-fac84fced361",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				}
			],
			"id": "eca64bb6-97fa-40af-a30c-60abd4d26323"
		},
		{
			"name": "Chaining-NegativeScenarios-sudha",
			"item": [
				{
					"name": "Add New Program1 To Test Neg Scenarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the programId is present in the response\r",
									"if (responseBody && responseBody.programId) {\r",
									"    // Store the programId and programName in collection variables\r",
									"    pm.collectionVariables.set(\"programId1\", responseBody.programId);\r",
									"    pm.collectionVariables.set(\"programName1\", responseBody.programName);\r",
									"    console.log(\"Program ID1: \" + responseBody.programId);\r",
									"} else {\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);\r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "24ba5396-774d-4f5c-a4eb-12ce84962cb5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 3-letter string\r",
									"function generateRandomLetters() {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    var result = '';\r",
									"    for (var i = 0; i < 4; i++) {\r",
									"        result = result+characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic program name\r",
									"var programName1 = \"APINinjas-\" + generateRandomLetters();\r",
									"\r",
									"// Set the program name as collection variables\r",
									"pm.collectionVariables.set(\"programName1\", programName1);\r",
									"\r",
									"console.log(\"Generated Program Name 1: \" + programName1);\r",
									"\r",
									"//Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d89f27a6-e724-428c-ade3-78d1a9594228"
							}
						}
					],
					"id": "04d0e692-ab7f-4c82-b66b-be9719f5636e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"var programId1 = pm.collectionVariables.get(\"programId1\");\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    return Math.floor(100 + Math.random() * 900);  // Generates a 3-digit number between 100 and 999\r",
									"}\r",
									"\r",
									"// Generate dynamic program name with random 3-digit number\r",
									"var batchName1 = programName1 + generateRandomNumber();\r",
									"\r",
									"// Store batchName as a collection variable\r",
									"pm.collectionVariables.set(\"batchName1\", batchName1);\r",
									"\r",
									"// Log the batchName for verification\r",
									"console.log(\"Generated Batch Name:\", batchName1);\r",
									"\r",
									"// Predefined storage for batch descriptions based on batch type\r",
									"const batchDescriptions = {\r",
									"    \"Beginner\": \"An API testing course designed for beginners.\",\r",
									"    \"Intermediate\": \"A workshop on advanced API testing, focusing on automation.\",\r",
									"    \"Advanced\": \"A course in API security testing and vulnerability scanning.\",\r",
									"    \"Specialized\": \"An in-depth program designed for specialized topics in API.\"\r",
									"};\r",
									"\r",
									"// Predefined storage for the number of classes based on batch type\r",
									"const batchClassCounts = {\r",
									"    \"Beginner\": 5,\r",
									"    \"Intermediate\": 10,\r",
									"    \"Advanced\": 15,\r",
									"    \"Specialized\": 20\r",
									"};\r",
									"\r",
									"// Dynamic selection of batch type\r",
									"const selectedBatchType = \"Intermediate\"; // You can dynamically determine this based on your test setup\r",
									"\r",
									"// Retrieve batch description and number of classes based on the selected batch type\r",
									"const selectedBatchDescription = batchDescriptions[selectedBatchType] || batchDescriptions[\"Beginner\"]; \r",
									"const selectedBatchClassCount = batchClassCounts[selectedBatchType] || batchClassCounts[\"Beginner\"];\r",
									"\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"\r",
									"var batchData = {\r",
									"    batchName: batchName1,\r",
									"    batchDescription: selectedBatchDescription,\r",
									"    batchNoOfClasses: selectedBatchClassCount, \r",
									"    batchStatus: batchStatus,\r",
									"    programId: programId1,\r",
									"    programName: programName1\r",
									"};\r",
									"\r",
									"// Set the batchData as the request body\r",
									"pm.request.body.raw = JSON.stringify(batchData);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Request Body:\", batchData);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "354e2b0e-0777-4410-8ea3-3ee53c89588c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody=pm.response.json();\r",
									"// Get the batchId from the response body\r",
									"var batchId1 = pm.response.json().batchId;\r",
									"\r",
									"// Store the batchId as a collection variable\r",
									"pm.collectionVariables.set(\"batchId1\", batchId1);\r",
									"\r",
									"// Log the batchId for verification\r",
									"console.log(\"Stored batchId as collection variable:\", batchId1);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "72704dbe-84ca-4515-860f-6bd5451c429e"
							}
						}
					],
					"id": "8b51dce3-f7b9-4bca-a209-7e5f9b8c1cd9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchName\": \"{{batchName1}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"programId\": \"{{programId}}\",\r\n    \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Create Class To Test Neg Scenarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();  \r",
									"\r",
									"// Extract classId and staffId from the response\r",
									"var classId = response.csId;\r",
									"var staffId = response.classStaffId;  \r",
									"var classrecordings=response.classRecordingPath;\r",
									"\r",
									"// Store classId and staffId in collection variables\r",
									"pm.collectionVariables.set(\"classId\", classId);\r",
									"pm.collectionVariables.set(\"staffId\", staffId);\r",
									"pm.collectionVariables.set(\"classrecordings\", classrecordings);\r",
									"\r",
									"// Log for verification\r",
									"console.log(\"Stored classId: \", classId);\r",
									"console.log(\"Stored staffId: \", staffId);\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(201);    \r",
									"testHeader(\"Content-Type\");\r",
									"testStatusLine(201,\"Created\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "6c7d449a-af01-43f5-b80e-b7bf778f688d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Generate a unique class topic by appending a random 4-digit number\r",
									"const classTopic = programName1 + Math.floor(1000 + Math.random() * 9000) + \" An introduction to AI\";\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"pm.collectionVariables.set(\"classTopic\", classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Generated Class Topic:\", classTopic);\r",
									"\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"var classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4a3546a5-5512-4f82-89b9-28832364b8b9"
							}
						}
					],
					"id": "36fde322-6e0e-4d69-ab7b-62c52df26e3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Create Duplicate ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response indicates an error (success is false)\r",
									"if (responseBody.success === false) {\r",
									"    // Print the error message from the response\r",
									"    console.error(\"Error: \" + responseBody.message);\r",
									"} else if (responseBody && responseBody.programId) {\r",
									"    // If the response contains programId and programName, print them\r",
									"    console.log(\"Program ID: \" + responseBody.programId);\r",
									"    console.log(\"Program Name: \" + responseBody.programName);\r",
									"} else {\r",
									"    // If neither condition is met, log a failure\r",
									"    console.error(\"Failed to retrieve programId1 from the response.\");\r",
									"}\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertNotFoundErrorString = pm.collectionVariables.get(\"assertNotFoundError\");\r",
									"\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertNotFoundError = eval(`(${assertNotFoundErrorString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\");\r",
									"\r",
									"// Construct the expected error message\r",
									"const expectedMessage = \"cannot create program , since already exists\";\r",
									"\r",
									"// Check if the response body contains the expected message and status is false\r",
									"pm.test(\"Response contains expected message and status is false\", function() {\r",
									"    pm.expect(responseBody).to.have.property(\"message\", expectedMessage);\r",
									"    pm.expect(responseBody).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4606f002-abe9-47bb-979c-335c6549d0c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Access data from CSV file\r",
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"// Set these values as local variables for the request\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "79f51626-c3af-4871-bffd-a54a6ba4c15c"
							}
						}
					],
					"id": "b063c10d-2eaa-482a-a806-932deddc5bcc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-Create Program with Null Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(500);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(500,\"Internal Server Error\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0b78508a-c878-4873-ba15-d0229c430a49"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var programName = pm.iterationData.get(\"programName\");\r",
									"var nullProgramStauts = pm.iterationData.get(\"nullProgramStauts\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"programName\", programName);\r",
									"pm.variables.set(\"nullProgramStauts\", nullProgramStauts);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9e756267-a03c-4db1-95de-b27dcd9d0561"
							}
						}
					],
					"id": "d7c5d506-d0dc-4f63-be7e-1cadb1610474",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{nullProgramStauts}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}saveprogram"
					},
					"response": []
				},
				{
					"name": "Neg-CreateBatch-BadRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var batchDescription = pm.iterationData.get(\"batchDescription\");\r",
									"var outOfScopeBatchNoOfClasses = pm.iterationData.get(\"outOfScopeBatchNoOfClasses\");\r",
									"var batchStatus = pm.iterationData.get(\"batchStatus\");\r",
									"\r",
									"pm.variables.set(\"batchDescription\", batchDescription);\r",
									"pm.variables.set(\"outOfScopeBatchNoOfClasses\", outOfScopeBatchNoOfClasses);\r",
									"pm.variables.set(\"batchStatus\", batchStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4832bb4e-cea0-465a-8d7d-8d28dc430bce"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8cf4a229-ac35-4de7-8417-da4afcd59938"
							}
						}
					],
					"id": "294aa578-a733-4ea2-8cfd-c70b912b593e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"batchNoOfClasses\": {{outOfScopeBatchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId1}}\",\r\n  \"programName\": \"{{programName1}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches"
					},
					"response": []
				},
				{
					"name": "Neg-Duplicate Class Topic",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the programName1 collection variable\r",
									"var programName1 = pm.collectionVariables.get(\"programName1\");\r",
									"\r",
									"// Store the generated classTopic as a collection variable\r",
									"var classTopic=pm.collectionVariables.get(classTopic);\r",
									"\r",
									"// Log the classTopic for verification\r",
									"console.log(\"Class Topic \", classTopic);\r",
									"\r",
									"// Retrieve iteration data or set default values for other variables\r",
									"var classComments = pm.iterationData.get(\"classComments\");\r",
									"var classDate = pm.iterationData.get(\"classDate\");\r",
									"var classDescription = pm.iterationData.get(\"classDescription\");\r",
									"var classNo = pm.iterationData.get(\"classNo\");\r",
									"var classNotes = pm.iterationData.get(\"classNotes\");\r",
									"var classRecordingPath = pm.iterationData.get(\"classRecordingPath\");\r",
									"var classStaffId = pm.iterationData.get(\"classStaffId\");\r",
									"var classStatus = pm.iterationData.get(\"classStatus\");\r",
									"// Get the classScheduledDates variable (either from iteration data or a default value)\r",
									"let classScheduledDates = pm.iterationData.get(\"classScheduledDates\");\r",
									"\r",
									"// Split the classScheduledDates into an array of dates\r",
									"let dateArray = classScheduledDates.split(',');\r",
									"\r",
									"// Map over the dates and ensure they're in ISO 8601 format\r",
									"let formattedDates = dateArray.map(dateStr => {\r",
									"    // Convert the date string to a valid Date object\r",
									"    let dateObj = new Date(dateStr);\r",
									"    if (isNaN(dateObj)) {\r",
									"        console.log(\"Invalid date:\", dateStr); // Debugging\r",
									"        return null; // Return null if the date is invalid\r",
									"    }\r",
									"    return dateObj.toISOString(); // Format the date to ISO\r",
									"});\r",
									"\r",
									"// Join the formatted dates back into an array (not a string)\r",
									"let formattedClassScheduledDates = formattedDates.filter(date => date !== null); // Ensure only valid dates are included\r",
									"\r",
									"// Log the formatted dates for debugging\r",
									"console.log(\"Formatted classScheduledDates:\", formattedClassScheduledDates);\r",
									"\r",
									"// Set the formatted classScheduledDates as a Postman variable\r",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(formattedClassScheduledDates)); // Use JSON.stringify to send it as an array\r",
									"\r",
									"// Set the other variables\r",
									"pm.variables.set(\"classComments\", classComments);\r",
									"pm.variables.set(\"classDate\", classDate);\r",
									"pm.variables.set(\"classDescription\", classDescription);\r",
									"pm.variables.set(\"classNo\", classNo);\r",
									"pm.variables.set(\"classNotes\", classNotes);\r",
									"pm.variables.set(\"classRecordingPath\", classRecordingPath);\r",
									"pm.variables.set(\"classStaffId\", classStaffId);\r",
									"pm.variables.set(\"classStatus\", classStatus);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e1dc979e-097b-41bc-b716-da471af97cd0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "26252399-a37f-464d-a037-969a799d9195"
							}
						}
					],
					"id": "26ad8649-22fe-4151-aff8-05d7c7cb5ef8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId1}},\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"batchName\": \"{{batchName1}}\",\r\n  \"classScheduledDates\": {{classScheduledDates}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}CreateClassSchedule"
					},
					"response": []
				},
				{
					"name": "Neg-Get Program with Invalid Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var responseBody = pm.response.json();\r",
									"\r",
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"assertMessageAndSuccess(responseBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4e311e95-93bc-44a1-896f-312a78e00bfd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "3ab88b0a-97d4-4a71-aaf2-d0c9921fe8b1"
							}
						}
					],
					"id": "7005ac6d-098d-4b52-afb0-01d96547eb6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}programs/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch by Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7568c864-34a3-4fbc-ae9b-e4f3a12e68c4"
							}
						}
					],
					"id": "69f12e0d-917b-492c-bc84-f9c6905f0dfa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchId/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "820900f2-cca0-4953-84e6-5d94621ae3ff"
							}
						}
					],
					"id": "c9a8fb85-97e4-4588-9cfc-62f770d5dab4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/batchName/{{invalidBatchName}}"
					},
					"response": []
				},
				{
					"name": "Neg-GET Batch By InvalidProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"try {\r",
									"    var responseBody = pm.response.json();\r",
									"    assertMessageAndSuccess(responseBody);\r",
									"} catch (e) {\r",
									"    console.error(\"Response is not JSON or empty:\", pm.response.text());\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "fe21207d-da37-4602-b3d6-bb46b709c0ca"
							}
						}
					],
					"id": "74a998b3-2be7-41e7-966f-bc64e2440dc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batches/program/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2a5055aa-5dc1-4a17-b6c3-158ded217618"
							}
						}
					],
					"id": "42089356-40ef-47fe-81d6-4f13223d9546",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}batchRecordings/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Details By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5d293685-f36e-47df-bdcf-6acd782c6ba5"
							}
						}
					],
					"id": "02b5d059-7273-4fdd-b64c-ba6981ff9a14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}class/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get All Classes By Invalid Class Topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9607fcad-d2e2-4fbd-9f2f-20a393757127"
							}
						}
					],
					"id": "842c1269-2094-49c5-9acf-1b23ce3805c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classes/{{invalidClassTopic}}"
					},
					"response": []
				},
				{
					"name": "Neg-GetClasses_WithNonExistingBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "815f111e-f1d2-4a9e-99e3-4832b2f17f5c"
							}
						}
					],
					"id": "228217a4-a133-49fe-b70c-e6de7b9ed7fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesbyBatch/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get All Classes By Invalid StaffId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0e738ee1-673d-4f9e-8b0f-1648fdf99c76"
							}
						}
					],
					"id": "a5cf7574-89a7-4e7e-aff6-e8ebf082e91d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classesByStaff/{{invalidStaffId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "33e1e99a-caba-427d-9ac0-c9994fc8836a"
							}
						}
					],
					"id": "740e26cf-979a-4d37-b27a-e60707bc7cb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}classRecordings/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-GetUpcomingClasses_InvalidStudentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"\r",
									"pm.expect(responseBody).to.be.an(\"array\").that.is.empty;"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "bda93364-f7f4-4d4c-9914-e2427d6f01da"
							}
						}
					],
					"id": "ab72fc06-389f-4d0b-8397-89cad890cfaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}upcomingClasses/{{invalidStudentId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Get Class Recordings By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5a390627-a7b1-4e39-aa22-9c93432d8c9d"
							}
						}
					],
					"id": "ea3fc457-371f-41ac-9d50-50ca8430ec9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}download/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch Of a User By Invalid User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a1c53004-4ab9-43fa-a0be-794a462af1fc"
							}
						}
					],
					"id": "46c4fdd1-c808-470f-bbc0-e3c54b443324",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/{{sampleInvalidUserId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program with Invalid Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var invalidProgramName = pm.iterationData.get(\"invalidProgramName\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"invalidProgramName\", invalidProgramName);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9d952f23-2944-402a-96d0-eced248ec699"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\");\r",
									"\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5c5c7df2-a02f-4b07-afa3-5fc2f4558816"
							}
						}
					],
					"id": "93533477-ec58-44c2-876e-85a6c6bcfc8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{invalidProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{invalidProgramName}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var noProgramDescription = pm.iterationData.get(\"noProgramDescription\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"noProgramDescription\", noProgramDescription);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "429c25d1-5e9b-4a36-9e22-595a70455131"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5405ded9-771c-4fb5-8717-3e749801d151"
							}
						}
					],
					"id": "28a30daa-9721-4101-ae25-8f1ef3fc41cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{noProgramDescription}}\",\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programName1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program by Invalid ProgramId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var invalidProgramId = pm.iterationData.get(\"invalidProgramId\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"invalidProgramId\", invalidProgramId);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8aa3a8d2-456c-434b-9282-8893bdf66b76"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5cc3369b-efa2-480e-b79f-7697e1ede071"
							}
						}
					],
					"id": "53967391-23f2-46f1-9ce0-9a206048fd08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programId\": {{invalidProgramId}},\r\n  \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Program With Missing Field By Program Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var programDescription = pm.iterationData.get(\"programDescription\");\r",
									"var nullProgramName = pm.iterationData.get(\"nullProgramName\");\r",
									"var programStatus = pm.iterationData.get(\"programStatus\");\r",
									"\r",
									"pm.variables.set(\"programDescription\", programDescription);\r",
									"pm.variables.set(\"nullProgramName\", nullProgramName);\r",
									"pm.variables.set(\"programStatus\", programStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c50fcb68-eadc-4c28-abbf-4f30b0829a92"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "dc012a05-899f-472d-b226-62a14836aa03"
							}
						}
					],
					"id": "c634e0a3-ace1-44b7-a904-cb88319ad8f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programId\": {{programId1}},\r\n  \"programName\": \"{{nullProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}program/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Update Batch By Invalid Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var invalidBatchDescription = pm.iterationData.get(\"invalidBatchDescription\");\r",
									"var missingBatchName = pm.iterationData.get(\"missingBatchName\");\r",
									"var invalidBatchNoOfClasses = pm.iterationData.get(\"invalidBatchNoOfClasses\");\r",
									"var invalidBatchStatus = pm.iterationData.get(\"invalidBatchStatus\");\r",
									"var invalidProgramId = pm.iterationData.get(\"invalidProgramId\");\r",
									"var nullProgramName = pm.iterationData.get(\"nullProgramName\");\r",
									"\r",
									"pm.variables.set(\"invalidBatchDescription\", invalidBatchDescription);\r",
									"pm.variables.set(\"missingBatchName\", missingBatchName);\r",
									"pm.variables.set(\"invalidBatchNoOfClasses\", invalidBatchNoOfClasses);\r",
									"pm.variables.set(\"invalidBatchStatus\", invalidBatchStatus);\r",
									"pm.variables.set(\"invalidProgramId\", invalidProgramId);\r",
									"pm.variables.set(\"nullProgramName\", nullProgramName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a94d71ac-cb34-4367-abeb-825c8703b4c9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(400);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(400,\"Bad Request\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "30f042bc-be2c-4f3a-a1de-14ecab5b989d"
							}
						}
					],
					"id": "809f1744-c094-4a74-9434-ce89452d2ef0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{invalidBatchDescription}}\",\r\n    \"batchName\": \"{{missingBatchName}}\",\r\n    \"batchNoOfClasses\": \"{{invalidBatchNoOfClasses}}\",\r\n    \"batchStatus\": \"{{invalidBatchStatus}}\",\r\n    \"programId\": \"{{invalidProgramId}}\",\r\n    \"programName\": \"{{nullProgramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Class By Invalid Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "c487a5e6-ecf9-42f6-a273-0bb6513fa832"
							}
						}
					],
					"id": "4790cd65-cd66-4716-b726-19e25f35cd48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{invalidClassId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Batch with Non-Existing BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "821cf786-86da-4606-9984-69f3ed8313f6"
							}
						}
					],
					"id": "cf411e8a-fbf1-4623-81d7-c507014be88d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"// var responseBody=pm.response.json();\r",
									"// assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "312bdf12-d01f-407b-84d7-37a8c0113adf"
							}
						}
					],
					"id": "6253005d-ad8b-4cc4-a5c5-cade11086968",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "1ecf3090-9064-441c-b398-a656bea8f6d8"
							}
						}
					],
					"id": "343847d4-e072-4433-8f22-88ef92c6bfa0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{invalidProgramId}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e1c7f75b-424d-4b1b-9609-0ad3c3242253"
							}
						}
					],
					"id": "6d66caa7-f3a5-4148-b9cc-6f7bfd0f9866",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogname/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Neg-Delete Program with Deleted ProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "e84c902b-e1cb-46ea-a889-8b2aab50c3a8"
							}
						}
					],
					"id": "2ad43c78-98c9-4a97-b290-41f24c804d4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId2}}"
					},
					"response": []
				},
				{
					"name": "Delete All Programs/Batches assigned to the User By InvalidUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var assertMessageAndSuccessString=pm.collectionVariables.get(\"assertMessageAndSuccess\");\r",
									"\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"var assertMessageAndSuccess = eval(`(${assertMessageAndSuccessString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(404);    \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(404,\"Not Found\")\r",
									"\r",
									"var responseBody=pm.response.json();\r",
									"assertMessageAndSuccess(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "074c6edd-8a78-4495-8918-3ea80a7b8e91"
							}
						}
					],
					"id": "cbf9829a-76a7-4e32-8d34-4af82982ed62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}userRoleProgramBatchMap/deleteAll/{{sampleInvalidUserId}}"
					},
					"response": []
				}
			],
			"id": "2f6a2aa7-71ef-4f12-b145-77bc5339602f"
		},
		{
			"name": "CleanUp And Logout",
			"item": [
				{
					"name": "Delete Class By Class Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(500)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "59ee1252-aacb-46bc-b4e1-4274d5cb93bd"
							}
						}
					],
					"id": "5ea01142-4c7e-42e5-8dfa-41d998b9d79b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deleteByClass/{{classId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch By BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);  \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "f857c768-dedb-4121-ab3c-c48bf09481e0"
							}
						}
					],
					"id": "9ed4f542-1cbb-461b-a50a-e46a413cbfcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ProgramId1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2632ee90-6c71-4c52-953c-a7fdc36ed519"
							}
						}
					],
					"id": "080dcdb8-8f3f-454d-9e41-77f8a3ada8f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{baseURL}}deletebyprogid/{{programId1}}"
					},
					"response": []
				},
				{
					"name": "User Log Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve and evaluate each function from collection to make it usable in this request\r",
									"eval(pm.collectionVariables.get(\"testResponseTime\"));\r",
									"eval(pm.collectionVariables.get(\"testStatusCode\"));\r",
									"eval(pm.collectionVariables.get(\"testHeader\"));\r",
									"var testStatusLineString = pm.collectionVariables.get(\"testStatusLine\");\r",
									"var testStatusLine = eval(`(${testStatusLineString})`);\r",
									"\r",
									"testResponseTime(1000)\r",
									"testStatusCode(200);   \r",
									"testHeader(\"Content-Type\"); \r",
									"testStatusLine(200,\"OK\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "9a1d8dc1-7c19-47b7-9465-c9c1ce358de2"
							}
						}
					],
					"id": "c98b5bd2-e873-4411-ba52-89a96ec2f871",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}logoutlms"
					},
					"response": []
				}
			],
			"id": "91c3e588-9e86-4a9b-920d-0d3a86bbe73b"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "01371f00-c533-4bf8-bcee-b4cd5644f439"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Define reusable test functions\r",
					"function testResponseTime(maxTime) {\r",
					"    pm.test(`Response time is less than ${maxTime}ms`, () => {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(maxTime);\r",
					"    });\r",
					"}\r",
					"\r",
					"function testStatusCode(expectedStatus) {\r",
					"    pm.test(`Status code is ${expectedStatus}`, () => {\r",
					"        pm.response.to.have.status(expectedStatus);\r",
					"    });\r",
					"}\r",
					"\r",
					"function testHeader(headerName) {\r",
					"    pm.test(`Header \"${headerName}\" is present`, () => {\r",
					"        pm.response.to.have.header(headerName);\r",
					"    });\r",
					"}\r",
					"\r",
					"var testStatusLine = function(expectedStatusCode, expectedStatusMessage) {\r",
					"    pm.test(`Status line should be \"${expectedStatusCode} ${expectedStatusMessage}\"`, function () {\r",
					"        pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
					"        pm.expect(pm.response.status).to.eql(expectedStatusMessage);\r",
					"    });\r",
					"};\r",
					"\r",
					"function assertNotFoundError(responseBody, expectedMessage) {\r",
					"    pm.test(\"Error message is as expected\", function () {\r",
					"        pm.expect(responseBody.message.trim()).to.eql(expectedMessage.trim());\r",
					"    });\r",
					"\r",
					"    pm.test(\"Success is false\", function () {\r",
					"        pm.expect(responseBody.success).to.be.false;\r",
					"    });\r",
					"}\r",
					"\r",
					"function assertMessageAndSuccess(responseBody,) {\r",
					"    pm.test(\"Response contains a message and success is false\", function() {\r",
					"        // Ensure that the response contains the 'message' property\r",
					"        pm.expect(responseBody).to.have.property(\"message\");\r",
					"        // Logs the message to console\r",
					"                 console.log(\"Message content:\", responseBody.message); \r",
					"                      \r",
					"        // Ensure that the 'success' field is false\r",
					"        pm.expect(responseBody).to.have.property(\"success\", false);\r",
					"    });\r",
					"}\r",
					"\r",
					"function validateSchema(data, schema, testName) {\r",
					"    var Ajv = require('ajv');\r",
					"    var ajv = new Ajv();\r",
					"\r",
					"    // Compile the schema with AJV\r",
					"    var validate = ajv.compile(schema);\r",
					"    var isValid = validate(data);\r",
					"\r",
					"    // Postman test for schema validation\r",
					"    pm.test(testName + \" Schema validation\", function () {\r",
					"        pm.expect(isValid).to.be.true;\r",
					"    });\r",
					"\r",
					"    // If validation fails, log errors\r",
					"    if (!isValid) {\r",
					"        console.log(testName + \" Schema validation error:\", validate.errors);\r",
					"    }\r",
					"}\r",
					"\r",
					"//Save the functions globally within the collection for use\r",
					"pm.collectionVariables.set(\"testResponseTime\", testResponseTime.toString());\r",
					"pm.collectionVariables.set(\"testStatusCode\", testStatusCode.toString());\r",
					"pm.collectionVariables.set(\"testHeader\", testHeader.toString());\r",
					"pm.collectionVariables.set(\"testStatusLine\", testStatusLine.toString());\r",
					"pm.collectionVariables.set(\"assertNotFoundError\", assertNotFoundError.toString());\r",
					"pm.collectionVariables.set(\"assertMessageAndSuccess\", assertMessageAndSuccess.toString());\r",
					"pm.collectionVariables.set(\"validateSchema\", validateSchema.toString());\r",
					"\r",
					"\r",
					"\r",
					"\r",
					""
				],
				"id": "8dfa4de8-5ee6-4bff-b92e-8a1b9cebf8f6"
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJTZGV0QGdtYWlsLmNvbSIsImlhdCI6MTczMTM3OTYyMywiZXhwIjoxNzMxNDA4NDIzfQ.19lGyd6Ycs8n2luRm8gF6h1oYRYcnm007gfQvoWrfcSW_uAummirYejqcI-1eQ0Bykip2WcUId84ct7Q9N9vHQ"
		},
		{
			"key": "programName1",
			"value": "APINinjas-HbGO"
		},
		{
			"key": "programName2",
			"value": "APINinjas-xRdf"
		},
		{
			"key": "programId1",
			"value": 17503
		},
		{
			"key": "programId2",
			"value": 17489
		},
		{
			"key": "updatedProgramName",
			"value": "APINinjas-Dr"
		},
		{
			"key": "batchName1",
			"value": "APINinjas-UQlQ742"
		},
		{
			"key": "batchName2",
			"value": "APINinjas-xRdf316"
		},
		{
			"key": "batchId2",
			"value": 9495
		},
		{
			"key": "batchId1",
			"value": 9496
		},
		{
			"key": "classTopic",
			"value": "APINinjas-UuRe8438 An introduction to AI"
		},
		{
			"key": "classId",
			"value": 758
		},
		{
			"key": "staffId",
			"value": "U53"
		},
		{
			"key": "classrecordings",
			"value": "",
			"disabled": true
		},
		{
			"key": "sampleStudentId",
			"value": "U54",
			"type": "string"
		},
		{
			"key": "invalidClassId",
			"value": "2000",
			"type": "string"
		},
		{
			"key": "invalidStudentId",
			"value": "U500",
			"type": "string"
		},
		{
			"key": "invalidStaffId",
			"value": "U1000",
			"type": "string"
		},
		{
			"key": "invalidBatchId",
			"value": "30",
			"type": "string"
		},
		{
			"key": "invalidClassTopic",
			"value": ".net introduction",
			"type": "string"
		},
		{
			"key": "sampleUserId",
			"value": "U29",
			"type": "string"
		},
		{
			"key": "sampleInvalidUserId",
			"value": "U7",
			"type": "string"
		},
		{
			"key": "sampleUserIdOfUser",
			"value": "U57",
			"type": "string"
		},
		{
			"key": "testResponseTime",
			"value": "function testResponseTime(maxTime) {\r\n    pm.test(`Response time is less than ${maxTime}ms`, () => {\r\n        pm.expect(pm.response.responseTime).to.be.below(maxTime);\r\n    });\r\n}"
		},
		{
			"key": "testStatusCode",
			"value": "function testStatusCode(expectedStatus) {\r\n    pm.test(`Status code is ${expectedStatus}`, () => {\r\n        pm.response.to.have.status(expectedStatus);\r\n    });\r\n}"
		},
		{
			"key": "testHeader",
			"value": "function testHeader(headerName) {\r\n    pm.test(`Header \"${headerName}\" is present`, () => {\r\n        pm.response.to.have.header(headerName);\r\n    });\r\n}"
		},
		{
			"key": "testStatusLine",
			"value": "function(expectedStatusCode, expectedStatusMessage) {\r\n    pm.test(`Status line should be \"${expectedStatusCode} ${expectedStatusMessage}\"`, function () {\r\n        pm.expect(pm.response.code).to.eql(expectedStatusCode);\r\n        pm.expect(pm.response.status).to.eql(expectedStatusMessage);\r\n    });\r\n}"
		},
		{
			"key": "userIdForProgramBatchMap",
			"value": "U57",
			"type": "string"
		},
		{
			"key": "invalidBatchName",
			"value": "samplebatch",
			"type": "string"
		},
		{
			"key": "invalidProgramId",
			"value": "55",
			"type": "string"
		},
		{
			"key": "invalidProgramName",
			"value": "APINinjas",
			"type": "string"
		},
		{
			"key": "assertNotFoundError",
			"value": "function assertNotFoundError(responseBody, expectedMessage) {\r\n    pm.test(\"Error message is as expected\", function () {\r\n        pm.expect(responseBody.message.trim()).to.eql(expectedMessage.trim());\r\n    });\r\n\r\n    pm.test(\"Success is false\", function () {\r\n        pm.expect(responseBody.success).to.be.false;\r\n    });\r\n}"
		},
		{
			"key": "assertMessageAndSuccess",
			"value": "function assertMessageAndSuccess(responseBody,) {\r\n    pm.test(\"Response contains a message and success is false\", function() {\r\n        // Ensure that the response contains the 'message' property\r\n        pm.expect(responseBody).to.have.property(\"message\");\r\n        // Logs the message to console\r\n                 console.log(\"Message content:\", responseBody.message); \r\n                      \r\n        // Ensure that the 'success' field is false\r\n        pm.expect(responseBody).to.have.property(\"success\", false);\r\n    });\r\n}"
		},
		{
			"key": "baseURL",
			"value": "https://lms-hackthon-oct24-3efc7e0df381.herokuapp.com/lms/",
			"type": "string"
		},
		{
			"key": "validateSchema",
			"value": "function validateSchema(data, schema, testName) {\r\n    var Ajv = require('ajv');\r\n    var ajv = new Ajv();\r\n\r\n    // Compile the schema with AJV\r\n    var validate = ajv.compile(schema);\r\n    var isValid = validate(data);\r\n\r\n    // Postman test for schema validation\r\n    pm.test(testName + \" Schema validation\", function () {\r\n        pm.expect(isValid).to.be.true;\r\n    });\r\n\r\n    // If validation fails, log errors\r\n    if (!isValid) {\r\n        console.log(testName + \" Schema validation error:\", validate.errors);\r\n    }\r\n}"
		},
		{
			"key": "adminID",
			"value": ""
		},
		{
			"key": "classrecordings",
			"value": ""
		}
	]
}